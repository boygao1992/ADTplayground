// Generated by purs bundle 0.12.1
var PS = {};
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Category = PS["Control.Category"];                 
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 217, column 1 - line 217, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.FunctorWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
})(PS["Data.FoldableWithIndex"] = PS["Data.FoldableWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
})(PS["Data.TraversableWithIndex"] = PS["Data.TraversableWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 38, column 8 - line 38, column 52: " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 238, column 1 - line 238, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 46, column 1 - line 46, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 82, column 1 - line 82, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  }; 
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))(function ($21) {
              return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($21));
          });
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
    "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Control.Monad.ST.Internal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {// module Control.Promise

  exports.promise = function (f) {
    return function () {
      return new Promise(function (success, error) {
        var succF = function (s) { return function() { return success(s); } };
        var failF = function (s) { return function() { return error(s); } };

        // This indicates the aff was wrong?
        try { f(succF)(failF)(); }
        catch (e) {
          error(e);
        }
      });
    };
  };
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Effect = PS["Effect"];                 
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS["Effect.Class"] = PS["Effect.Class"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Effect.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };                                                                               
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["throw"] = $$throw;
  exports["showError"] = showError;
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
    "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Effect.Unsafe"];
  var Effect = PS["Effect"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Effect.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Unsafe = PS["Effect.Unsafe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                          
  var functorAff = new Data_Functor.Functor($foreign._map);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff line 400, column 21 - line 402, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff line 395, column 20 - line 399, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff line 390, column 12 - line 392, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign._liftEffect);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign._throwError);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign._catchError);                                     
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)(function ($52) {
              return Effect_Class.liftEffect(monadEffectAff)(k($52));
          })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff"] = launchAff;
  exports["runAff"] = runAff;
  exports["runAff_"] = runAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Control.Promise"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];                 
  var fromAff = function (aff) {
      return $foreign.promise(function (succ) {
          return function (err) {
              return Effect_Aff.runAff_(Data_Either.either(err)(succ))(aff);
          };
      });
  };
  exports["fromAff"] = fromAff;
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  }                       

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  var objToString = Object.prototype.toString;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                                 

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  exports["Tuple"] = Tuple;
  exports["uncurry"] = uncurry;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["index"] = index;
  exports["range"] = $foreign.range;
  exports["filter"] = $foreign.filter;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Foreign.Object.ST"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Foreign.Object"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Foreign_Object_ST = PS["Foreign.Object.ST"];
  var Prelude = PS["Prelude"];
  var Type_Row_Homogeneous = PS["Type.Row.Homogeneous"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });                                                            
  var thawST = $foreign._copyST;
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };                                                                                                 
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign._mapWithKey(m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign._fmapObject(m, f);
      };
  });
  var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorObject;
  }, mapWithKey);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var v = Foreign_Object_ST["new"]();
              Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(Data_Foldable.foldableArray)(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Foreign_Object_ST.poke(v1.value0)(v1.value1)(v);
              })();
              return v;
          });
      };
  };
  var fold = $foreign._foldM(Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexObject;
  }, function () {
      return functorWithIndexObject;
  }, function () {
      return traversableObject;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableObject = new Data_Traversable.Traversable(function () {
      return foldableObject;
  }, function () {
      return functorObject;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function ($47) {
          return Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative)(Data_Function["const"]($47));
      };
  });
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["mapWithKey"] = mapWithKey;
  exports["values"] = values;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["thawST"] = thawST;
  exports["functorObject"] = functorObject;
  exports["functorWithIndexObject"] = functorWithIndexObject;
  exports["foldableObject"] = foldableObject;
  exports["foldableWithIndexObject"] = foldableWithIndexObject;
  exports["traversableObject"] = traversableObject;
  exports["traversableWithIndexObject"] = traversableWithIndexObject;
  exports["empty"] = $foreign.empty;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                 
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(caseJsonObject);
  var caseJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(caseJsonNull);
  exports["caseJsonNull"] = caseJsonNull;
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonObject"] = caseJsonObject;
  exports["isNull"] = isNull;
  exports["toObject"] = toObject;
  exports["stringify"] = $foreign.stringify;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Type_Proxy = PS["Type.Proxy"];                 
  var BProxy = (function () {
      function BProxy() {

      };
      BProxy.value = new BProxy();
      return BProxy;
  })();        
  var Or = {}; 
  var If = {};
  var orTrue = Or;
  var orFalse = Or;
  var ifTrue = If;
  var ifFalse = If;
  exports["BProxy"] = BProxy;
  exports["Or"] = Or;
  exports["If"] = If;
  exports["orTrue"] = orTrue;
  exports["orFalse"] = orFalse;
  exports["ifTrue"] = ifTrue;
  exports["ifFalse"] = ifFalse;
})(PS["Type.Data.Boolean"] = PS["Type.Data.Boolean"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Equality = PS["Type.Equality"];                 
  var RProxy = (function () {
      function RProxy() {

      };
      RProxy.value = new RProxy();
      return RProxy;
  })();
  exports["RProxy"] = RProxy;
})(PS["Type.Row"] = PS["Type.Row"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Record_Unsafe_Union = PS["Record.Unsafe.Union"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS["Record"] = PS["Record"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];
  var Record = PS["Record"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };
  var decodeJsonString = new DecodeJson(Data_Argonaut_Core.caseJsonString(new Data_Either.Left("Value is not a String"))(Data_Either.Right.create));                               
  var decodeJsonJson = new DecodeJson(Data_Either.Right.create);                                                                                       
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeJObject = function ($63) {
      return Data_Maybe.maybe(new Data_Either.Left("Value is not an Object"))(Data_Either.Right.create)(Data_Argonaut_Core.toObject($63));
  };
  var decodeForeignObject = function (dictDecodeJson) {
      return new DecodeJson(function ($72) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v) {
              return "Couldn't decode ForeignObject: " + v;
          })(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decodeJson(dictDecodeJson)))(decodeJObject)($72));
      });
  };
  exports["decodeJson"] = decodeJson;
  exports["DecodeJson"] = DecodeJson;
  exports["decodeJObject"] = decodeJObject;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeForeignObject"] = decodeForeignObject;
})(PS["Data.Argonaut.Decode.Class"] = PS["Data.Argonaut.Decode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                 
  var getFieldOptional$prime = function (dictDecodeJson) {
      return function (o) {
          return function (s) {
              var decode = function (json) {
                  var $8 = Data_Argonaut_Core.isNull(json);
                  if ($8) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                  };
                  return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(json));
              };
              return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(s)(o));
          };
      };
  };
  var elaborateFailure = function (s) {
      return function (e) {
          var msg = function (m) {
              return "Failed to decode key '" + (s + ("': " + m));
          };
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(msg)(e);
      };
  };
  var getField = function (dictDecodeJson) {
      return function (o) {
          return function (s) {
              return Data_Maybe.maybe(Data_Either.Left.create("Expected field " + Data_Show.show(Data_Show.showString)(s)))(function ($9) {
                  return elaborateFailure(s)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)($9));
              })(Foreign_Object.lookup(s)(o));
          };
      };
  };
  exports["getField"] = getField;
  exports["getFieldOptional'"] = getFieldOptional$prime;
})(PS["Data.Argonaut.Decode.Combinators"] = PS["Data.Argonaut.Decode.Combinators"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];                 
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
})(PS["Data.Generic.Rep"] = PS["Data.Generic.Rep"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["null"] = $foreign["null"];
  exports["notNull"] = $foreign.notNull;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
    "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Pattern = function (x) {
      return x;
  };
  exports["Pattern"] = Pattern;
})(PS["Data.String.Pattern"] = PS["Data.String.Pattern"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.String.Common"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Prelude = PS["Prelude"];
  exports["split"] = $foreign.split;
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Prelude = PS["Prelude"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS["Effect.Aff.Compat"] = PS["Effect.Aff.Compat"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Effect.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
    "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Effect.Ref"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
    "use strict";

  const G = require("graphql")

  // NOTE testing
  // exports.int = "GraphQLInt"
  exports.int = G.GraphQLInt    

  // NOTE testing
  // exports.string = "GraphQLString"
  exports.string = G.GraphQLString

  // NOTE testing
  // exports.id = "GraphQLID"
  exports.id = G.GraphQLID          

  exports._nonNull = function (type) {
    // NOTE testing
    // return { "nonNull": type }

    return new G.GraphQLNonNull(type)
  }

  exports._list = function (type) {
    // NOTE testing
    // return { "GraphQLList": type }

    return new G.GraphQLList(type)
  }

  // { name :: String, description :: Maybe String, fields :: Record fieldsRow }
  exports._objectType = function (objectRecord) {
    // NOTE testing
    // return { "GraphQLObjectType": objectRecord }
    return new G.GraphQLObjectType(objectRecord)
  }

  exports._schema = function(query) {
    return new G.GraphQLSchema({
      query: query
    })
  }

  // NOTE from purescript-graphql
  exports._graphql = function(
    schema,
    requestString,
    rootValue,
    contextValue,
    variableValues,
    operationName
  ) {
    return function(onError, onSuccess) {
      G.graphql(
        schema,
        requestString,
        rootValue,
        contextValue,
        variableValues,
        operationName
      )
      .then(onSuccess)
      .catch(onError)

      return function(cancelError, cancelerError, cancelerSuccess) {
        cancelerError(new Error("Cancellation is not supported yet."));
      }
    }
  }
})(PS["GraphQL.Type.Internal"] = PS["GraphQL.Type.Internal"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["GraphQL.Type.Internal"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Aff_Compat = PS["Effect.Aff.Compat"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];

  // | IsScalarPred
  var IsScalarPred = {};

  // | IsScalar
  var IsScalar = function (toScalar) {
      this.toScalar = toScalar;
  };

  // | IsListPred
  var IsListPred = {};

  // | IsList
  var IsList = function (toList) {
      this.toList = toList;
  };
  var toScalar = function (dict) {
      return dict.toScalar;
  };
  var toList = function (dict) {
      return dict.toList;
  };
  var schema = function (root) {
      return $foreign._schema(root);
  };
  var rootObjectType = function (config) {
      return $foreign._objectType(config);
  };
  var objectType = function (config) {
      return $foreign._objectType(config);
  };
  var nonNull = function (gType) {
      return $foreign._nonNull(gType);
  };
  var list = function (gType) {
      return $foreign._list(gType);
  };                            
  var isScalarString = new IsScalar(nonNull($foreign.string));
  var isScalarPredString = IsScalarPred;
  var isScalarPredNo = IsScalarPred;          
  var isScalarPredInt = IsScalarPred;
  var isScalarPredId = IsScalarPred;                           
  var isScalarInt = new IsScalar(nonNull($foreign["int"]));
  var isScalarId = new IsScalar(nonNull($foreign.id));
  var isListPredNo = IsListPred;
  var isListPredArray = IsListPred;
  var isListArray = new IsList(function (gType) {
      return nonNull(list(gType));
  });

  // NOTE from purescript-graphql
  var graphql = function (s) {
      return function (query) {
          return function (root) {
              return function (context) {
                  return function (variables) {
                      return function (operationName) {
                          var nVariables = Data_Nullable.toNullable(variables);
                          var nOperation = Data_Nullable.toNullable(operationName);
                          return Effect_Aff_Compat.fromEffectFnAff($foreign._graphql(s, query, root, context, nVariables, nOperation));
                      };
                  };
              };
          };
      };
  };
  exports["toList"] = toList;
  exports["toScalar"] = toScalar;
  exports["nonNull"] = nonNull;
  exports["list"] = list;
  exports["objectType"] = objectType;
  exports["rootObjectType"] = rootObjectType;
  exports["schema"] = schema;
  exports["graphql"] = graphql;
  exports["IsScalarPred"] = IsScalarPred;
  exports["IsScalar"] = IsScalar;
  exports["IsListPred"] = IsListPred;
  exports["IsList"] = IsList;
  exports["isScalarPredInt"] = isScalarPredInt;
  exports["isScalarPredString"] = isScalarPredString;
  exports["isScalarPredId"] = isScalarPredId;
  exports["isScalarPredNo"] = isScalarPredNo;
  exports["isScalarInt"] = isScalarInt;
  exports["isScalarString"] = isScalarString;
  exports["isScalarId"] = isScalarId;
  exports["isListPredArray"] = isListPredArray;
  exports["isListPredNo"] = isListPredNo;
  exports["isListArray"] = isListArray;
})(PS["GraphQL.Type.Internal"] = PS["GraphQL.Type.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var genericUser = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericPost = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericComment = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  exports["genericUser"] = genericUser;
  exports["genericPost"] = genericPost;
  exports["genericComment"] = genericComment;
})(PS["Examples.ForumExample.Model"] = PS["Examples.ForumExample.Model"] || {});
(function(exports) {
    "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];                 
  var NullableAndMaybe = function (fromMaybeToNullable, fromNullableToMaybe) {
      this.fromMaybeToNullable = fromMaybeToNullable;
      this.fromNullableToMaybe = fromNullableToMaybe;
  };
  var nullableAndMaybeOther = new NullableAndMaybe(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
  var nullableAndMaybeBaseCase = new NullableAndMaybe(Data_Nullable.toNullable, Data_Nullable.toMaybe);
  var fromNullableToMaybe = function (dict) {
      return dict.fromNullableToMaybe;
  };
  var fromMaybeToNullable = function (dict) {
      return dict.fromMaybeToNullable;
  };
  exports["fromMaybeToNullable"] = fromMaybeToNullable;
  exports["fromNullableToMaybe"] = fromNullableToMaybe;
  exports["NullableAndMaybe"] = NullableAndMaybe;
  exports["nullableAndMaybeBaseCase"] = nullableAndMaybeBaseCase;
  exports["nullableAndMaybeOther"] = nullableAndMaybeOther;
})(PS["GraphQL.Type.Internal.NullableAndMaybe"] = PS["GraphQL.Type.Internal.NullableAndMaybe"] || {});
(function(exports) {
    "use strict";
  var FTProxy = (function () {
      function FTProxy() {

      };
      FTProxy.value = new FTProxy();
      return FTProxy;
  })();
  var AProxy = (function () {
      function AProxy() {

      };
      AProxy.value = new AProxy();
      return AProxy;
  })();
  exports["FTProxy"] = FTProxy;
  exports["AProxy"] = AProxy;
})(PS["GraphQL.Type.Data.Field"] = PS["GraphQL.Type.Data.Field"] || {});
(function(exports) {
    "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };

  exports.unsafeModify = function(l) {
    return function (f) {
      return function(rec) {
        rec[l] = f(rec[l]);
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Record.Builder"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_Unsafe_Union = PS["Record.Unsafe.Union"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var modify = function (dictCons) {
      return function (dictCons1) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (f) {
                      return function (r1) {
                          return $foreign.unsafeModify(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(f)(r1);
                      };
                  };
              };
          };
      };
  };
  var insert = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
  exports["modify"] = modify;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function(exports) {
    "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Symbol = PS["Data.Symbol"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var Prelude = PS["Prelude"];
  var Record_Builder = PS["Record.Builder"];
  var Type_Data_RowList = PS["Type.Data.RowList"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];                 

  // | NullableAndMaybeRec
  var NullableAndMaybeRec = function (fromMaybeToNullableRec, fromNullableToMaybeRec) {
      this.fromMaybeToNullableRec = fromMaybeToNullableRec;
      this.fromNullableToMaybeRec = fromNullableToMaybeRec;
  };
  var FromNullableToMaybeRecRecord = function (fromNullableToMaybeRecRecord) {
      this.fromNullableToMaybeRecRecord = fromNullableToMaybeRecRecord;
  };
  var FromMaybeToNullableRecRecord = function (fromMaybeToNullableRecRecord) {
      this.fromMaybeToNullableRecRecord = fromMaybeToNullableRecRecord;
  };
  var nullableToMaybeRecordNil = new FromNullableToMaybeRecRecord(function (v) {
      return function (v1) {
          return Control_Category.identity(Record_Builder.categoryBuilder);
      };
  });
  var nullableAndMaybeString = new NullableAndMaybeRec(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
  var nullableAndMaybeInt = new NullableAndMaybeRec(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));    
  var fromNullableToMaybeRecRecord = function (dict) {
      return dict.fromNullableToMaybeRecRecord;
  };
  var fromNullableToMaybeRec = function (dict) {
      return dict.fromNullableToMaybeRec;
  };
  var nullableToMaybeRecordCons = function (dictFromNullableToMaybeRecRecord) {
      return function (dictIsSymbol) {
          return function (dictNullableAndMaybeRec) {
              return function (dictCons) {
                  return function (dictCons1) {
                      return new FromNullableToMaybeRecRecord(function (v) {
                          return function (ri) {
                              return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.modify(dictCons)(dictCons1)(dictIsSymbol)(Data_Symbol.SProxy.value)(fromNullableToMaybeRec(dictNullableAndMaybeRec)))(fromNullableToMaybeRecRecord(dictFromNullableToMaybeRecRecord)(Type_Data_RowList.RLProxy.value)(ri));
                          };
                      });
                  };
              };
          };
      };
  };
  var fromMaybeToNullableRecRecordNil = new FromMaybeToNullableRecRecord(function (v) {
      return function (v1) {
          return Control_Category.identity(Record_Builder.categoryBuilder);
      };
  });
  var fromMaybeToNullableRecRecord = function (dict) {
      return dict.fromMaybeToNullableRecRecord;
  };
  var nullableAndMaybeRecord = function (dictRowToList) {
      return function (dictRowToList1) {
          return function (dictFromNullableToMaybeRecRecord) {
              return function (dictFromMaybeToNullableRecRecord) {
                  return new NullableAndMaybeRec(function (ro) {
                      return Record_Builder.build(fromMaybeToNullableRecRecord(dictFromMaybeToNullableRecRecord)(Type_Data_RowList.RLProxy.value)(ro))(ro);
                  }, function (ri) {
                      return Record_Builder.build(fromNullableToMaybeRecRecord(dictFromNullableToMaybeRecRecord)(Type_Data_RowList.RLProxy.value)(ri))(ri);
                  });
              };
          };
      };
  };
  var fromMaybeToNullableRec = function (dict) {
      return dict.fromMaybeToNullableRec;
  };
  var fromMaybeToNullableRecRecordCons = function (dictFromMaybeToNullableRecRecord) {
      return function (dictIsSymbol) {
          return function (dictNullableAndMaybeRec) {
              return function (dictCons) {
                  return function (dictCons1) {
                      return new FromMaybeToNullableRecRecord(function (v) {
                          return function (ro) {
                              return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.modify(dictCons)(dictCons1)(dictIsSymbol)(Data_Symbol.SProxy.value)(fromMaybeToNullableRec(dictNullableAndMaybeRec)))(fromMaybeToNullableRecRecord(dictFromMaybeToNullableRecRecord)(Type_Data_RowList.RLProxy.value)(ro));
                          };
                      });
                  };
              };
          };
      };
  };
  exports["fromMaybeToNullableRec"] = fromMaybeToNullableRec;
  exports["fromMaybeToNullableRecRecord"] = fromMaybeToNullableRecRecord;
  exports["fromNullableToMaybeRec"] = fromNullableToMaybeRec;
  exports["fromNullableToMaybeRecRecord"] = fromNullableToMaybeRecRecord;
  exports["NullableAndMaybeRec"] = NullableAndMaybeRec;
  exports["FromNullableToMaybeRecRecord"] = FromNullableToMaybeRecRecord;
  exports["FromMaybeToNullableRecRecord"] = FromMaybeToNullableRecRecord;
  exports["nullableAndMaybeInt"] = nullableAndMaybeInt;
  exports["nullableAndMaybeString"] = nullableAndMaybeString;
  exports["nullableAndMaybeRecord"] = nullableAndMaybeRecord;
  exports["nullableToMaybeRecordNil"] = nullableToMaybeRecordNil;
  exports["nullableToMaybeRecordCons"] = nullableToMaybeRecordCons;
  exports["fromMaybeToNullableRecRecordNil"] = fromMaybeToNullableRecRecordNil;
  exports["fromMaybeToNullableRecRecordCons"] = fromMaybeToNullableRecRecordCons;
})(PS["GraphQL.Type.Internal.NullableAndMaybeRec"] = PS["GraphQL.Type.Internal.NullableAndMaybeRec"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Symbol = PS["Data.Symbol"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var Prelude = PS["Prelude"];
  var Record_Builder = PS["Record.Builder"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_RowList = PS["Type.Data.RowList"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];                 
  var IsRecordPred = {};     
  var ToInputObjectWithPath = function (toInputObjectWithPath) {
      this.toInputObjectWithPath = toInputObjectWithPath;
  };
  var ToInputObjectRowList = function (toInputObjectRowList) {
      this.toInputObjectRowList = toInputObjectRowList;
  };
  var ToInputObjectType = function (toInputObjectType) {
      this.toInputObjectType = toInputObjectType;
  };
  var ToInputObjectTypeDispatch = function (toInputObjectTypeDispatch) {
      this.toInputObjectTypeDispatch = toInputObjectTypeDispatch;
  };
  var toInputObjectWithPath = function (dict) {
      return dict.toInputObjectWithPath;
  };
  var toInputObjectTypeDispatch = function (dict) {
      return dict.toInputObjectTypeDispatch;
  };
  var toInputObjectType = function (dict) {
      return dict.toInputObjectType;
  };
  var toInputObjectRowListNil = new ToInputObjectRowList(function (v) {
      return function (v1) {
          return Control_Category.identity(Record_Builder.categoryBuilder);
      };
  });
  var toInputObjectRowList = function (dict) {
      return dict.toInputObjectRowList;
  };
  var toInputObjectRowListCons = function (dictToInputObjectType) {
      return function (dictToInputObjectRowList) {
          return function (dictCons) {
              return function (dictCons1) {
                  return function (dictLacks) {
                      return function (dictIsSymbol) {
                          return new ToInputObjectRowList(function (pathP) {
                              return function (v) {
                                  return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert(dictCons1)(dictLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)({
                                      type: toInputObjectType(dictToInputObjectType)(Data_Symbol.SProxy.value)(pathP)(Type_Proxy["Proxy"].value)
                                  }))(toInputObjectRowList(dictToInputObjectRowList)(pathP)(Type_Data_RowList.RLProxy.value));
                              };
                          });
                      };
                  };
              };
          };
      };
  };
  var toInputObjectWithPathToRowList = function (dictRowToList) {
      return function (dictToInputObjectRowList) {
          return new ToInputObjectWithPath(function (v) {
              return function (v1) {
                  return Record_Builder.build(toInputObjectRowList(dictToInputObjectRowList)(Data_Symbol.SProxy.value)(Type_Data_RowList.RLProxy.value))({});
              };
          });
      };
  };
  var toInputObjectFieldIsScalarOther = function (dictIsScalar) {
      return new ToInputObjectTypeDispatch(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return GraphQL_Type_Internal.toScalar(dictIsScalar);
                          };
                      };
                  };
              };
          };
      });
  };
  var toInputObjectFieldIsScalarId = function (dictIsScalar) {
      return new ToInputObjectTypeDispatch(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return GraphQL_Type_Internal.toScalar(dictIsScalar);
                          };
                      };
                  };
              };
          };
      });
  };
  var toInputObjectFieldDispatch = function (dictIsScalarPred) {
      return function (dictIsListPred) {
          return function (dictIsRecordPred) {
              return function (dictToInputObjectTypeDispatch) {
                  return new ToInputObjectType(function (v) {
                      return function (v1) {
                          return function (v2) {
                              return toInputObjectTypeDispatch(dictToInputObjectTypeDispatch)(Type_Data_Boolean.BProxy.value)(Type_Data_Boolean.BProxy.value)(Type_Data_Boolean.BProxy.value)(Data_Symbol.SProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value);
                          };
                      };
                  });
              };
          };
      };
  };                                    
  var isRecordPredOther = IsRecordPred;
  exports["toInputObjectRowList"] = toInputObjectRowList;
  exports["toInputObjectType"] = toInputObjectType;
  exports["toInputObjectTypeDispatch"] = toInputObjectTypeDispatch;
  exports["toInputObjectWithPath"] = toInputObjectWithPath;
  exports["IsRecordPred"] = IsRecordPred;
  exports["ToInputObjectWithPath"] = ToInputObjectWithPath;
  exports["ToInputObjectRowList"] = ToInputObjectRowList;
  exports["ToInputObjectType"] = ToInputObjectType;
  exports["ToInputObjectTypeDispatch"] = ToInputObjectTypeDispatch;
  exports["isRecordPredOther"] = isRecordPredOther;
  exports["toInputObjectWithPathToRowList"] = toInputObjectWithPathToRowList;
  exports["toInputObjectRowListNil"] = toInputObjectRowListNil;
  exports["toInputObjectRowListCons"] = toInputObjectRowListCons;
  exports["toInputObjectFieldDispatch"] = toInputObjectFieldDispatch;
  exports["toInputObjectFieldIsScalarId"] = toInputObjectFieldIsScalarId;
  exports["toInputObjectFieldIsScalarOther"] = toInputObjectFieldIsScalarOther;
})(PS["GraphQL.Type.Internal.ToInputObject"] = PS["GraphQL.Type.Internal.ToInputObject"] || {});
(function(exports) {
    "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];                 

  // | IsEqualPred
  // https://github.com/justinwoo/purescript-type-isequal/
  var IsEqualPred = {};
  var isEqualPredYes = IsEqualPred;
  var isEqualPredNo = IsEqualPred;
  exports["IsEqualPred"] = IsEqualPred;
  exports["isEqualPredYes"] = isEqualPredYes;
  exports["isEqualPredNo"] = isEqualPredNo;
})(PS["Type.Utils"] = PS["Type.Utils"] || {});
(function(exports) {
    "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Utils = PS["Type.Utils"];                 
  var LProxy = (function () {
      function LProxy() {

      };
      LProxy.value = new LProxy();
      return LProxy;
  })();

  // | ContainsPred
  var ContainsPred = {};

  // | Remove
  var Remove = {};

  // | Set
  var $$Set = {};
  var setImpl = function (dictRemove) {
      return $$Set;
  };
  var removeNil = Remove;
  var removeConsNotEqual = function (dictRemove) {
      return Remove;
  };
  var removeConsIsEqual = function (dictRemove) {
      return Remove;
  };
  var containsPredNil = ContainsPred;
  var containsPredCons = function (dictContainsPred) {
      return function (dictIsEqualPred) {
          return function (dictOr) {
              return ContainsPred;
          };
      };
  };
  exports["LProxy"] = LProxy;
  exports["ContainsPred"] = ContainsPred;
  exports["Remove"] = Remove;
  exports["containsPredNil"] = containsPredNil;
  exports["containsPredCons"] = containsPredCons;
  exports["removeNil"] = removeNil;
  exports["removeConsIsEqual"] = removeConsIsEqual;
  exports["removeConsNotEqual"] = removeConsNotEqual;
  exports["setImpl"] = setImpl;
})(PS["Type.Data.List"] = PS["Type.Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Promise = PS["Control.Promise"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Unsafe = PS["Effect.Unsafe"];
  var GraphQL_Type_Data_Field = PS["GraphQL.Type.Data.Field"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var GraphQL_Type_Internal_NullableAndMaybe = PS["GraphQL.Type.Internal.NullableAndMaybe"];
  var GraphQL_Type_Internal_NullableAndMaybeRec = PS["GraphQL.Type.Internal.NullableAndMaybeRec"];
  var GraphQL_Type_Internal_ToInputObject = PS["GraphQL.Type.Internal.ToInputObject"];
  var Prelude = PS["Prelude"];
  var Record = PS["Record"];
  var Record_Builder = PS["Record.Builder"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_List = PS["Type.Data.List"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var ToObject = function (toObject) {
      this.toObject = toObject;
  };
  var ToObjectRow = function (toObjectRow) {
      this.toObjectRow = toObjectRow;
  };
  var ToObjectRowDispatch = function (toObjectRowDispatch) {
      this.toObjectRowDispatch = toObjectRowDispatch;
  };
  var ToResolvers = {};
  var ToResolversDispatch = {};
  var ToDeps = {};
  var ToDepsImpl = {};
  var ToDepsImplDispatch = {};
  var ToScalarObjectFieldNoArg = function (toScalarObjectFieldNoArg) {
      this.toScalarObjectFieldNoArg = toScalarObjectFieldNoArg;
  };
  var ToScalarObjectFieldHandleList = function (toScalarObjectFieldHandleList) {
      this.toScalarObjectFieldHandleList = toScalarObjectFieldHandleList;
  };
  var ToScalarObjectFieldHandleListDispatch = function (toScalarObjectFieldHandleListDispatch) {
      this.toScalarObjectFieldHandleListDispatch = toScalarObjectFieldHandleListDispatch;
  };
  var ToScalarObjectFieldHandleOutputList = {};
  var ToScalarObjectFieldHandleOutputListDispatch = {};
  var ToRelationalObjectFieldNoArg = function (toRelationalObjectFieldNoArg) {
      this.toRelationalObjectFieldNoArg = toRelationalObjectFieldNoArg;
  };
  var ToRelationalObjectFieldWithArgs = function (toRelationalObjectFieldWithArgs) {
      this.toRelationalObjectFieldWithArgs = toRelationalObjectFieldWithArgs;
  };
  var ToRelationalObjectFieldHandleDepList = function (toRelationalObjectHandleDepList) {
      this.toRelationalObjectHandleDepList = toRelationalObjectHandleDepList;
  };
  var ToRelationalObjectFieldHandleDepListDispatch = function (toRelationalObjectFieldHandleDepListDispatch) {
      this.toRelationalObjectFieldHandleDepListDispatch = toRelationalObjectFieldHandleDepListDispatch;
  };
  var ToRelationalObjectFieldHandleOutputList = {};
  var ToRelationalObjectFieldHandleOutputListDispatch = {};
  var ParseFieldSpec = {};
  var ParseList = {};
  var ToFieldType = {};
  var ToFieldList = {};
  var FetchScalarFields = {};
  var toScalarObjectFieldNoArg = function (dict) {
      return dict.toScalarObjectFieldNoArg;
  };                                                                                                  
  var toScalarObjectFieldHandleOutputListNotListId = ToScalarObjectFieldHandleOutputListDispatch;
  var toScalarObjectFieldHandleOutputListIsListPred = function (dictIsListPred) {
      return function (dictToScalarObjectFieldHandleOutputListDispatch) {
          return ToScalarObjectFieldHandleOutputList;
      };
  };
  var toScalarObjectFieldHandleListDispatchNotList = function (dictIsScalar) {
      return new ToScalarObjectFieldHandleListDispatch(function (v) {
          return function (v1) {
              return GraphQL_Type_Internal.toScalar(dictIsScalar);
          };
      });
  };
  var toScalarObjectFieldHandleListDispatch = function (dict) {
      return dict.toScalarObjectFieldHandleListDispatch;
  };
  var toScalarObjectFieldHandleListIsListPred = function (dictIsListPred) {
      return function (dictToScalarObjectFieldHandleListDispatch) {
          return new ToScalarObjectFieldHandleList(function (v) {
              return toScalarObjectFieldHandleListDispatch(dictToScalarObjectFieldHandleListDispatch)(Type_Data_Boolean.BProxy.value)(Type_Proxy["Proxy"].value);
          });
      };
  };
  var toScalarObjectFieldHandleList = function (dict) {
      return dict.toScalarObjectFieldHandleList;
  };
  var toScalarObjectFieldNoArgImpl = function (dictToScalarObjectFieldHandleList) {
      return function (dictToScalarObjectFieldHandleOutputList) {
          return function (dictNullableAndMaybe) {
              return new ToScalarObjectFieldNoArg(function (v) {
                  return function (v1) {
                      return function (resolveFn) {
                          var trans = function (f) {
                              return function (source, v2, v3) {
                                  return Effect_Unsafe.unsafePerformEffect(Control_Promise.fromAff(Data_Functor.map(Effect_Aff.functorAff)(GraphQL_Type_Internal_NullableAndMaybe.fromMaybeToNullable(dictNullableAndMaybe))(f({
                                      source: source
                                  }))));
                              };
                          };
                          return {
                              type: toScalarObjectFieldHandleList(dictToScalarObjectFieldHandleList)(Type_Proxy["Proxy"].value),
                              resolve: Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(trans)(resolveFn))
                          };
                      };
                  };
              });
          };
      };
  };
  var toResolversScalarNoArg = function (dictToScalarObjectFieldNoArg) {
      return ToResolversDispatch;
  };
  var toResolversRelationalWithArgs = function (dictGeneric) {
      return function (dictRowToList) {
          return function (dictToFieldList) {
              return function (dictFetchScalarFields) {
                  return function (dictToRelationalObjectFieldWithArgs) {
                      return ToResolversDispatch;
                  };
              };
          };
      };
  };
  var toResolversRelationalNoArg = function (dictGeneric) {
      return function (dictRowToList) {
          return function (dictToFieldList) {
              return function (dictFetchScalarFields) {
                  return function (dictToRelationalObjectFieldNoArg) {
                      return ToResolversDispatch;
                  };
              };
          };
      };
  };
  var toResolversNil = ToResolvers;
  var toResolversCons = function (dictToResolversDispatch) {
      return function (dictToResolvers) {
          return function (dictCons) {
              return ToResolvers;
          };
      };
  };
  var toRelationalObjectHandleDepList = function (dict) {
      return dict.toRelationalObjectHandleDepList;
  };
  var toRelationalObjectFieldWithArgsImpl = function (dictToInputObjectWithPath) {
      return function (dictToRelationalObjectFieldHandleDepList) {
          return function (dictToRelationalObjectFieldHandleOutputList) {
              return function (dictNullableAndMaybeRec) {
                  return function (dictNullableAndMaybe) {
                      return new ToRelationalObjectFieldWithArgs(function (v) {
                          return function (v1) {
                              return function (v2) {
                                  return function (v3) {
                                      return function (v4) {
                                          return function (v5) {
                                              return function (resolveFn) {
                                                  return function (depFn) {
                                                      return {
                                                          type: toRelationalObjectHandleDepList(dictToRelationalObjectFieldHandleDepList)(Type_Proxy["Proxy"].value)(depFn),
                                                          args: GraphQL_Type_Internal_ToInputObject.toInputObjectWithPath(dictToInputObjectWithPath)(Data_Symbol.SProxy.value)(Type_Row.RProxy.value),
                                                          resolve: function (source, args, v6) {
                                                              return Effect_Unsafe.unsafePerformEffect(Control_Promise.fromAff(Data_Functor.map(Effect_Aff.functorAff)(GraphQL_Type_Internal_NullableAndMaybe.fromMaybeToNullable(dictNullableAndMaybe))(resolveFn({
                                                                  source: source,
                                                                  args: GraphQL_Type_Internal_NullableAndMaybeRec.fromNullableToMaybeRec(dictNullableAndMaybeRec)(args)
                                                              }))));
                                                          }
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      });
                  };
              };
          };
      };
  };
  var toRelationalObjectFieldWithArgs = function (dict) {
      return dict.toRelationalObjectFieldWithArgs;
  };
  var toRelationalObjectFieldNoArgImpl = function (dictToRelationalObjectFieldHandleDepList) {
      return function (dictNullableAndMaybe) {
          return function (dictToRelationalObjectFieldHandleOutputList) {
              return new ToRelationalObjectFieldNoArg(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return function (v3) {
                              return function (resolveFn) {
                                  return function (depFn) {
                                      return {
                                          type: toRelationalObjectHandleDepList(dictToRelationalObjectFieldHandleDepList)(Type_Proxy["Proxy"].value)(depFn),
                                          resolve: function (source, v4, v5) {
                                              return Effect_Unsafe.unsafePerformEffect(Control_Promise.fromAff(Data_Functor.map(Effect_Aff.functorAff)(GraphQL_Type_Internal_NullableAndMaybe.fromMaybeToNullable(dictNullableAndMaybe))(resolveFn({
                                                  source: source
                                              }))));
                                          }
                                      };
                                  };
                              };
                          };
                      };
                  };
              });
          };
      };
  };
  var toRelationalObjectFieldNoArg = function (dict) {
      return dict.toRelationalObjectFieldNoArg;
  };
  var toRelationalObjectFieldHandleOutputListNotListNotMaybe = ToRelationalObjectFieldHandleOutputListDispatch;
  var toRelationalObjectFieldHandleOutputListNotListMaybe = ToRelationalObjectFieldHandleOutputListDispatch;
  var toRelationalObjectFieldHandleOutputListIsListPred = function (dictIsListPred) {
      return function (dictToRelationalObjectFieldHandleOutputListDispatch) {
          return ToRelationalObjectFieldHandleOutputList;
      };
  };
  var toRelationalObjectFieldHandleOutputListIsList = function (dictToRelationalObjectFieldHandleOutputList) {
      return ToRelationalObjectFieldHandleOutputListDispatch;
  };
  var toRelationalObjectFieldHandleDepListNotListNotMaybe = new ToRelationalObjectFieldHandleDepListDispatch(function (v) {
      return function (v1) {
          return function (depFn) {
              return GraphQL_Type_Internal.nonNull(depFn(Data_Unit.unit));
          };
      };
  });
  var toRelationalObjectFieldHandleDepListNotListMaybe = new ToRelationalObjectFieldHandleDepListDispatch(function (v) {
      return function (v1) {
          return function (depFn) {
              return depFn(Data_Unit.unit);
          };
      };
  });
  var toRelationalObjectFieldHandleDepListIsList = function (dictToRelationalObjectFieldHandleDepList) {
      return function (dictIsList) {
          return new ToRelationalObjectFieldHandleDepListDispatch(function (v) {
              return function (v1) {
                  return function (depFn) {
                      return GraphQL_Type_Internal.toList(dictIsList)(toRelationalObjectHandleDepList(dictToRelationalObjectFieldHandleDepList)(Type_Proxy["Proxy"].value)(depFn));
                  };
              };
          });
      };
  };
  var toRelationalObjectFieldHandleDepListDispatch = function (dict) {
      return dict.toRelationalObjectFieldHandleDepListDispatch;
  };
  var toRelationalObjectFieldHandleDepListIsListPred = function (dictIsListPred) {
      return function (dictToRelationalObjectFieldHandleDepListDispatch) {
          return new ToRelationalObjectFieldHandleDepList(function (v) {
              return function (depFn) {
                  return toRelationalObjectFieldHandleDepListDispatch(dictToRelationalObjectFieldHandleDepListDispatch)(Type_Data_Boolean.BProxy.value)(Type_Proxy["Proxy"].value)(depFn);
              };
          });
      };
  };
  var toObjectRowNil = new ToObjectRow(function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (v4) {
                      return Control_Category.identity(Record_Builder.categoryBuilder);
                  };
              };
          };
      };
  });
  var toObjectRowDispatchScalarNoArg = function (dictToScalarObjectFieldNoArg) {
      return function (dictIsSymbol) {
          return function (dictCons) {
              return new ToObjectRowDispatch(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return function (v3) {
                              return function (v4) {
                                  return function (v5) {
                                      return function (v6) {
                                          return function (rs) {
                                              return function (v7) {
                                                  return toScalarObjectFieldNoArg(dictToScalarObjectFieldNoArg)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(rs));
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              });
          };
      };
  };
  var toObjectRowDispatchRelationalWithArgs = function (dictGeneric) {
      return function (dictRowToList) {
          return function (dictToFieldList) {
              return function (dictFetchScalarFields) {
                  return function (dictAppend) {
                      return function (dictAppend1) {
                          return function (dictToRelationalObjectFieldWithArgs) {
                              return function (dictIsSymbol) {
                                  return function (dictCons) {
                                      return function (dictIsSymbol1) {
                                          return function (dictCons1) {
                                              return new ToObjectRowDispatch(function (v) {
                                                  return function (v1) {
                                                      return function (v2) {
                                                          return function (v3) {
                                                              return function (v4) {
                                                                  return function (v5) {
                                                                      return function (v6) {
                                                                          return function (rs) {
                                                                              return function (ds) {
                                                                                  return toRelationalObjectFieldWithArgs(dictToRelationalObjectFieldWithArgs)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(Type_Row.RProxy.value)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Type_Row.RProxy.value)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(rs))(Record.get(dictIsSymbol1)(dictCons1)(Data_Symbol.SProxy.value)(ds));
                                                                              };
                                                                          };
                                                                      };
                                                                  };
                                                              };
                                                          };
                                                      };
                                                  };
                                              });
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var toObjectRowDispatchRelationalNoArgs = function (dictGeneric) {
      return function (dictRowToList) {
          return function (dictToFieldList) {
              return function (dictFetchScalarFields) {
                  return function (dictToRelationalObjectFieldNoArg) {
                      return function (dictIsSymbol) {
                          return function (dictCons) {
                              return function (dictIsSymbol1) {
                                  return function (dictCons1) {
                                      return new ToObjectRowDispatch(function (v) {
                                          return function (v1) {
                                              return function (v2) {
                                                  return function (v3) {
                                                      return function (v4) {
                                                          return function (v5) {
                                                              return function (v6) {
                                                                  return function (rs) {
                                                                      return function (ds) {
                                                                          return toRelationalObjectFieldNoArg(dictToRelationalObjectFieldNoArg)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Type_Row.RProxy.value)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(rs))(Record.get(dictIsSymbol1)(dictCons1)(Data_Symbol.SProxy.value)(ds));
                                                                      };
                                                                  };
                                                              };
                                                          };
                                                      };
                                                  };
                                              };
                                          };
                                      });
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var toObjectRowDispatch = function (dict) {
      return dict.toObjectRowDispatch;
  };
  var toObjectRow = function (dict) {
      return dict.toObjectRow;
  };
  var toObjectRowCons = function (dictToObjectRow) {
      return function (dictToObjectRowDispatch) {
          return function (dictCons) {
              return function (dictLacks) {
                  return function (dictIsSymbol) {
                      return new ToObjectRow(function (v) {
                          return function (v1) {
                              return function (v2) {
                                  return function (rs) {
                                      return function (ds) {
                                          return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert(dictCons)(dictLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(toObjectRowDispatch(dictToObjectRowDispatch)(Data_Symbol.SProxy.value)(Data_Symbol.SProxy.value)(GraphQL_Type_Data_Field.AProxy.value)(Type_Proxy["Proxy"].value)(GraphQL_Type_Data_Field.FTProxy.value)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(rs)(ds)))(toObjectRow(dictToObjectRow)(Type_Data_List.LProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(rs)(ds));
                                      };
                                  };
                              };
                          };
                      });
                  };
              };
          };
      };
  };
  var toObjectImpl = function (dictGeneric) {
      return function (dictIsSymbol) {
          return function (dictRowToList) {
              return function (dictToFieldList) {
                  return function (dictFetchScalarFields) {
                      return function (dictToResolvers) {
                          return function (dictToDeps) {
                              return function (dictToObjectRow) {
                                  return new ToObject(function (v) {
                                      return function (rs) {
                                          return function (ds) {
                                              return GraphQL_Type_Internal.objectType({
                                                  name: Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value),
                                                  fields: function (v1) {
                                                      return Record_Builder.build(toObjectRow(dictToObjectRow)(Type_Data_List.LProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(rs)(ds))({});
                                                  }
                                              });
                                          };
                                      };
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var toObject = function (dict) {
      return dict.toObject;
  };
  var toFieldTypeImpl = function (dictIsScalarPred) {
      return function (dictIf) {
          return ToFieldType;
      };
  };
  var toFieldListNil = ToFieldList;
  var toFieldListCons = function (dictToFieldList) {
      return function (dictParseFieldSpec) {
          return ToFieldList;
      };
  };
  var toDepsNub = function (dictToDepsImpl) {
      return function (dictNub) {
          return ToDeps;
      };
  };
  var toDepsNil = ToDepsImpl;
  var toDepsImplDispatchIsScalar = function (dictToDepsImpl) {
      return ToDepsImplDispatch;
  };
  var toDepsImplDispatchIsRelational = function (dictToDepsImpl) {
      return function (dictGeneric) {
          return function (dictCons) {
              return ToDepsImplDispatch;
          };
      };
  };
  var toDepsCons = function (dictIsScalarPred) {
      return function (dictToDepsImplDispatch) {
          return ToDepsImpl;
      };
  };
  var parseListRelationalTarget = function (dictToFieldType) {
      return ParseList;
  };
  var parseListRelationalMaybeTarget = function (dictParseList) {
      return ParseList;
  };
  var parseListRelationalArray = function (dictParseList) {
      return ParseList;
  };
  var parseFieldSpecWithArgs = function (dictParseList) {
      return ParseFieldSpec;
  };
  var parseFieldSpecNoArg = function (dictParseList) {
      return ParseFieldSpec;
  };
  var fetchScalarFieldsNil = FetchScalarFields;
  var fetchScalarFieldsConsNotScalar = function (dictFetchScalarFields) {
      return FetchScalarFields;
  };
  var fetchScalarFieldsConsIsScalarId = function (dictFetchScalarFields) {
      return function (dictCons) {
          return FetchScalarFields;
      };
  };
  exports["toObject"] = toObject;
  exports["toObjectRow"] = toObjectRow;
  exports["toObjectRowDispatch"] = toObjectRowDispatch;
  exports["toRelationalObjectFieldHandleDepListDispatch"] = toRelationalObjectFieldHandleDepListDispatch;
  exports["toRelationalObjectFieldNoArg"] = toRelationalObjectFieldNoArg;
  exports["toRelationalObjectFieldWithArgs"] = toRelationalObjectFieldWithArgs;
  exports["toRelationalObjectHandleDepList"] = toRelationalObjectHandleDepList;
  exports["toScalarObjectFieldHandleList"] = toScalarObjectFieldHandleList;
  exports["toScalarObjectFieldHandleListDispatch"] = toScalarObjectFieldHandleListDispatch;
  exports["toScalarObjectFieldNoArg"] = toScalarObjectFieldNoArg;
  exports["ToObject"] = ToObject;
  exports["ToObjectRow"] = ToObjectRow;
  exports["ToObjectRowDispatch"] = ToObjectRowDispatch;
  exports["ToResolvers"] = ToResolvers;
  exports["ToResolversDispatch"] = ToResolversDispatch;
  exports["ToDeps"] = ToDeps;
  exports["ToDepsImpl"] = ToDepsImpl;
  exports["ToDepsImplDispatch"] = ToDepsImplDispatch;
  exports["ToScalarObjectFieldNoArg"] = ToScalarObjectFieldNoArg;
  exports["ToScalarObjectFieldHandleList"] = ToScalarObjectFieldHandleList;
  exports["ToScalarObjectFieldHandleListDispatch"] = ToScalarObjectFieldHandleListDispatch;
  exports["ToScalarObjectFieldHandleOutputList"] = ToScalarObjectFieldHandleOutputList;
  exports["ToScalarObjectFieldHandleOutputListDispatch"] = ToScalarObjectFieldHandleOutputListDispatch;
  exports["ToRelationalObjectFieldNoArg"] = ToRelationalObjectFieldNoArg;
  exports["ToRelationalObjectFieldWithArgs"] = ToRelationalObjectFieldWithArgs;
  exports["ToRelationalObjectFieldHandleDepList"] = ToRelationalObjectFieldHandleDepList;
  exports["ToRelationalObjectFieldHandleDepListDispatch"] = ToRelationalObjectFieldHandleDepListDispatch;
  exports["ToRelationalObjectFieldHandleOutputList"] = ToRelationalObjectFieldHandleOutputList;
  exports["ToRelationalObjectFieldHandleOutputListDispatch"] = ToRelationalObjectFieldHandleOutputListDispatch;
  exports["ParseFieldSpec"] = ParseFieldSpec;
  exports["ParseList"] = ParseList;
  exports["ToFieldType"] = ToFieldType;
  exports["ToFieldList"] = ToFieldList;
  exports["FetchScalarFields"] = FetchScalarFields;
  exports["toObjectImpl"] = toObjectImpl;
  exports["toObjectRowNil"] = toObjectRowNil;
  exports["toObjectRowCons"] = toObjectRowCons;
  exports["toObjectRowDispatchScalarNoArg"] = toObjectRowDispatchScalarNoArg;
  exports["toObjectRowDispatchRelationalNoArgs"] = toObjectRowDispatchRelationalNoArgs;
  exports["toObjectRowDispatchRelationalWithArgs"] = toObjectRowDispatchRelationalWithArgs;
  exports["toResolversNil"] = toResolversNil;
  exports["toResolversCons"] = toResolversCons;
  exports["toResolversScalarNoArg"] = toResolversScalarNoArg;
  exports["toResolversRelationalNoArg"] = toResolversRelationalNoArg;
  exports["toResolversRelationalWithArgs"] = toResolversRelationalWithArgs;
  exports["toDepsNub"] = toDepsNub;
  exports["toDepsNil"] = toDepsNil;
  exports["toDepsCons"] = toDepsCons;
  exports["toDepsImplDispatchIsScalar"] = toDepsImplDispatchIsScalar;
  exports["toDepsImplDispatchIsRelational"] = toDepsImplDispatchIsRelational;
  exports["toScalarObjectFieldNoArgImpl"] = toScalarObjectFieldNoArgImpl;
  exports["toScalarObjectFieldHandleListIsListPred"] = toScalarObjectFieldHandleListIsListPred;
  exports["toScalarObjectFieldHandleListDispatchNotList"] = toScalarObjectFieldHandleListDispatchNotList;
  exports["toScalarObjectFieldHandleOutputListIsListPred"] = toScalarObjectFieldHandleOutputListIsListPred;
  exports["toScalarObjectFieldHandleOutputListNotListId"] = toScalarObjectFieldHandleOutputListNotListId;
  exports["toRelationalObjectFieldNoArgImpl"] = toRelationalObjectFieldNoArgImpl;
  exports["toRelationalObjectFieldWithArgsImpl"] = toRelationalObjectFieldWithArgsImpl;
  exports["toRelationalObjectFieldHandleDepListIsListPred"] = toRelationalObjectFieldHandleDepListIsListPred;
  exports["toRelationalObjectFieldHandleDepListIsList"] = toRelationalObjectFieldHandleDepListIsList;
  exports["toRelationalObjectFieldHandleDepListNotListMaybe"] = toRelationalObjectFieldHandleDepListNotListMaybe;
  exports["toRelationalObjectFieldHandleDepListNotListNotMaybe"] = toRelationalObjectFieldHandleDepListNotListNotMaybe;
  exports["toRelationalObjectFieldHandleOutputListIsListPred"] = toRelationalObjectFieldHandleOutputListIsListPred;
  exports["toRelationalObjectFieldHandleOutputListIsList"] = toRelationalObjectFieldHandleOutputListIsList;
  exports["toRelationalObjectFieldHandleOutputListNotListMaybe"] = toRelationalObjectFieldHandleOutputListNotListMaybe;
  exports["toRelationalObjectFieldHandleOutputListNotListNotMaybe"] = toRelationalObjectFieldHandleOutputListNotListNotMaybe;
  exports["parseFieldSpecWithArgs"] = parseFieldSpecWithArgs;
  exports["parseFieldSpecNoArg"] = parseFieldSpecNoArg;
  exports["parseListRelationalArray"] = parseListRelationalArray;
  exports["parseListRelationalMaybeTarget"] = parseListRelationalMaybeTarget;
  exports["parseListRelationalTarget"] = parseListRelationalTarget;
  exports["toFieldTypeImpl"] = toFieldTypeImpl;
  exports["toFieldListNil"] = toFieldListNil;
  exports["toFieldListCons"] = toFieldListCons;
  exports["fetchScalarFieldsNil"] = fetchScalarFieldsNil;
  exports["fetchScalarFieldsConsIsScalarId"] = fetchScalarFieldsConsIsScalarId;
  exports["fetchScalarFieldsConsNotScalar"] = fetchScalarFieldsConsNotScalar;
})(PS["GraphQL.Type.Internal.ToObject"] = PS["GraphQL.Type.Internal.ToObject"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect_Aff = PS["Effect.Aff"];
  var Examples_ForumExample_Model = PS["Examples.ForumExample.Model"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var GraphQL_Type_Internal_NullableAndMaybe = PS["GraphQL.Type.Internal.NullableAndMaybe"];
  var GraphQL_Type_Internal_ToObject = PS["GraphQL.Type.Internal.ToObject"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Proxy = PS["Type.Proxy"];                 
  var postResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
          id: v.source.id + "_post"
      });
  };
  var commentConstructor = GraphQL_Type_Internal_ToObject.toObject(GraphQL_Type_Internal_ToObject.toObjectImpl(Examples_ForumExample_Model.genericComment)(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalNoArg(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalNoArg(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_ToObject.toResolversNil)())())())(GraphQL_Type_Internal_ToObject.toDepsNub(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsScalar(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsNil)(Examples_ForumExample_Model.genericPost)()))))(Examples_ForumExample_Model.genericUser)()))())(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowNil)(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalNoArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe)))(new Data_Symbol.IsSymbol(function () {
      return "post";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "post";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalNoArgs(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe)))(new Data_Symbol.IsSymbol(function () {
      return "author";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "User";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "author";
  }))))(Type_Proxy["Proxy"].value);
  var authorResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
          id: v.source.id + "_author"
      });
  };
  var comment = commentConstructor({
      id: Data_Maybe.Nothing.value,
      post: postResolver,
      author: authorResolver
  });
  exports["commentConstructor"] = commentConstructor;
  exports["postResolver"] = postResolver;
  exports["authorResolver"] = authorResolver;
  exports["comment"] = comment;
})(PS["Examples.ForumExample.Constructor.Comment"] = PS["Examples.ForumExample.Constructor.Comment"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect_Aff = PS["Effect.Aff"];
  var Examples_ForumExample_Model = PS["Examples.ForumExample.Model"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var GraphQL_Type_Internal_NullableAndMaybe = PS["GraphQL.Type.Internal.NullableAndMaybe"];
  var GraphQL_Type_Internal_NullableAndMaybeRec = PS["GraphQL.Type.Internal.NullableAndMaybeRec"];
  var GraphQL_Type_Internal_ToInputObject = PS["GraphQL.Type.Internal.ToInputObject"];
  var GraphQL_Type_Internal_ToObject = PS["GraphQL.Type.Internal.ToObject"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Proxy = PS["Type.Proxy"];                 
  var postConstructor = GraphQL_Type_Internal_ToObject.toObject(GraphQL_Type_Internal_ToObject.toObjectImpl(Examples_ForumExample_Model.genericPost)(new Data_Symbol.IsSymbol(function () {
      return "Post";
  }))()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalNoArg(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversNil)())())())(GraphQL_Type_Internal_ToObject.toDepsNub(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsScalar(GraphQL_Type_Internal_ToObject.toDepsNil)))(Examples_ForumExample_Model.genericComment)()))(Examples_ForumExample_Model.genericUser)()))())(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowNil)(GraphQL_Type_Internal_ToObject.toObjectRowDispatchScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "comments";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "comments";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalNoArgs(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe)))(new Data_Symbol.IsSymbol(function () {
      return "author";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "User";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "author";
  }))))(Type_Proxy["Proxy"].value);
  var commentsResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(function (n) {
          return {
              id: v.source.id + ("_comments_" + Data_Show.show(Data_Show.showInt)(n))
          };
      })(Data_Array.range(1)(v.args.limit)));
  };
  var authorResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
          id: v.source.id + "_author"
      });
  };
  var post = postConstructor({
      id: Data_Maybe.Nothing.value,
      author: authorResolver,
      comments: commentsResolver
  });
  exports["postConstructor"] = postConstructor;
  exports["authorResolver"] = authorResolver;
  exports["commentsResolver"] = commentsResolver;
  exports["post"] = post;
})(PS["Examples.ForumExample.Constructor.Post"] = PS["Examples.ForumExample.Constructor.Post"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect_Aff = PS["Effect.Aff"];
  var Examples_ForumExample_Model = PS["Examples.ForumExample.Model"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var GraphQL_Type_Internal_NullableAndMaybe = PS["GraphQL.Type.Internal.NullableAndMaybe"];
  var GraphQL_Type_Internal_NullableAndMaybeRec = PS["GraphQL.Type.Internal.NullableAndMaybeRec"];
  var GraphQL_Type_Internal_ToInputObject = PS["GraphQL.Type.Internal.ToInputObject"];
  var GraphQL_Type_Internal_ToObject = PS["GraphQL.Type.Internal.ToObject"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Proxy = PS["Type.Proxy"];                 
  var userConstructor = GraphQL_Type_Internal_ToObject.toObject(GraphQL_Type_Internal_ToObject.toObjectImpl(Examples_ForumExample_Model.genericUser)(new Data_Symbol.IsSymbol(function () {
      return "User";
  }))()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredString)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarString)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversNil)())())())(GraphQL_Type_Internal_ToObject.toDepsNub(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsScalar(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsNil)(Examples_ForumExample_Model.genericPost)()))))(Examples_ForumExample_Model.genericComment)()))())(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowNil)(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredString)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarString)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "posts";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "posts";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "comments";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "comments";
  }))))(Type_Proxy["Proxy"].value);
  var postsResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)([ {
          id: v.source.id + "_posts"
      } ]);
  };
  var commentsResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(function (n) {
          return {
              id: v.source.id + ("_comments_" + Data_Show.show(Data_Show.showInt)(n))
          };
      })(Data_Array.range(1)(v.args.limit)));
  };
  var user = userConstructor({
      id: Data_Maybe.Nothing.value,
      posts: postsResolver,
      comments: commentsResolver
  });
  exports["userConstructor"] = userConstructor;
  exports["commentsResolver"] = commentsResolver;
  exports["postsResolver"] = postsResolver;
  exports["user"] = user;
})(PS["Examples.ForumExample.Constructor.User"] = PS["Examples.ForumExample.Constructor.User"] || {});
(function(exports) {
    "use strict";

  function copyRecord(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  } 

  exports.thaw = function(rec) {
    return function() {
      return copyRecord(rec);
    };
  };

  exports.unsafeModify = function(l) {
    return function(f) {
      return function(rec) {
        return function() {
          rec[l] = f(rec[l]);
        };
      };
    };
  };
})(PS["Record.ST"] = PS["Record.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Record.ST"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var modify = function (dictCons) {
      return function (dictIsSymbol) {
          return function (l) {
              return $foreign.unsafeModify(Data_Symbol.reflectSymbol(dictIsSymbol)(l));
          };
      };
  };
  exports["modify"] = modify;
  exports["thaw"] = $foreign.thaw;
})(PS["Record.ST"] = PS["Record.ST"] || {});
(function(exports) {

  exports.unsafePeekLazyRef = function (l, ref) {
    return function () {
      return function () {
        return ref[l]
      }
    }
  }
})(PS["Record.ST.Nested"] = PS["Record.ST.Nested"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["Record.ST.Nested"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_ST = PS["Record.ST"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var peekLazyRef = function (dictCons) {
      return function (dictIsSymbol) {
          return function (l) {
              return function (stRecord) {
                  return $foreign.unsafePeekLazyRef(Data_Symbol.reflectSymbol(dictIsSymbol)(l), stRecord);
              };
          };
      };
  };
  exports["peekLazyRef"] = peekLazyRef;
})(PS["Record.ST.Nested"] = PS["Record.ST.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var GraphQL_Type_Data_Field = PS["GraphQL.Type.Data.Field"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var GraphQL_Type_Internal_ToObject = PS["GraphQL.Type.Internal.ToObject"];
  var Prelude = PS["Prelude"];
  var Record = PS["Record"];
  var Record_Builder = PS["Record.Builder"];
  var Record_ST = PS["Record.ST"];
  var Record_ST_Nested = PS["Record.ST.Nested"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_List = PS["Type.Data.List"];
  var Type_Data_RowList = PS["Type.Data.RowList"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];                 
  var ToRootObject = function (toRootObject) {
      this.toRootObject = toRootObject;
  };
  var ToEntityObjects = function (toEntityObjects) {
      this.toEntityObjects = toEntityObjects;
  };
  var InitObjectRecord = function (initObjectRecord) {
      this.initObjectRecord = initObjectRecord;
  };
  var InitObjectRecordFold = function (initObjectRecordFold) {
      this.initObjectRecordFold = initObjectRecordFold;
  };
  var DependencyRecord = function (dependencyRecord) {
      this.dependencyRecord = dependencyRecord;
  };
  var DependencyRecordFold = function (dependencyRecordFold) {
      this.dependencyRecordFold = dependencyRecordFold;
  };
  var PopulateObjectRecord = function (populateObjectRecord) {
      this.populateObjectRecord = populateObjectRecord;
  };
  var ConstructorDependency = function (constructorDependency) {
      this.constructorDependency = constructorDependency;
  };
  var ConstructorDependencyFold = function (constructorDependencyFold) {
      this.constructorDependencyFold = constructorDependencyFold;
  };
  var FetchRelationalFieldList = {};
  var CollectEntitiesImpl = {};
  var CollectEntitiesImplDispatch = {};
  var CollectEntitiesTraverse = {};
  var CollectEntitiesTraverseImpl = {};
  var CollectConstructors = {};
  var toRootObject = function (dict) {
      return dict.toRootObject;
  };
  var toEntityObjects = function (dict) {
      return dict.toEntityObjects;
  };
  var toRootObjectImpl = function (dictGeneric) {
      return function (dictRowToList) {
          return function (dictToFieldList) {
              return function (dictFetchRelationalFieldList) {
                  return function (dictCollectEntitiesTraverse) {
                      return function (dictCollectConstructors) {
                          return function (dictToEntityObjects) {
                              return function (dictToResolvers) {
                                  return function (dictToObjectRow) {
                                      return function (dictIsSymbol) {
                                          return new ToRootObject(function (v) {
                                              return function (constructors) {
                                                  return function (rootSource) {
                                                      return function (resolvers) {
                                                          var deps = toEntityObjects(dictToEntityObjects)(Type_Data_List.LProxy.value)(constructors);
                                                          return GraphQL_Type_Internal.rootObjectType({
                                                              name: Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value),
                                                              fields: Record_Builder.build(GraphQL_Type_Internal_ToObject.toObjectRow(dictToObjectRow)(Type_Data_List.LProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(resolvers)(deps))({})
                                                          });
                                                      };
                                                  };
                                              };
                                          });
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var populateObjectRecordNil = new PopulateObjectRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(Data_Unit.unit);
              };
          };
      };
  });
  var populateObjectRecord = function (dict) {
      return dict.populateObjectRecord;
  };
  var initObjectRecordFoldNil = new InitObjectRecordFold(function (v) {
      return Control_Category.identity(Record_Builder.categoryBuilder);
  });
  var initObjectRecordFold = function (dict) {
      return dict.initObjectRecordFold;
  };
  var initObjectRecordFoldCons = function (dictInitObjectRecordFold) {
      return function (dictGeneric) {
          return function (dictCons) {
              return function (dictLacks) {
                  return function (dictIsSymbol) {
                      return new InitObjectRecordFold(function (v) {
                          return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert(dictCons)(dictLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Nullable["null"]))(initObjectRecordFold(dictInitObjectRecordFold)(Type_Data_List.LProxy.value));
                      });
                  };
              };
          };
      };
  };
  var initObjectRecordImpl = function (dictInitObjectRecordFold) {
      return new InitObjectRecord(function (v) {
          return Record_ST.thaw(Record_Builder.build(initObjectRecordFold(dictInitObjectRecordFold)(Type_Data_List.LProxy.value))({}));
      });
  };
  var initObjectRecord = function (dict) {
      return dict.initObjectRecord;
  };
  var fetchRelationalFieldListNil = FetchRelationalFieldList;
  var fetchRelationalFieldListConsScalar = function (dictFetchRelationalFieldList) {
      return FetchRelationalFieldList;
  };
  var fetchRelationalFieldListConsRelational = function (dictFetchRelationalFieldList) {
      return function (dictSet) {
          return FetchRelationalFieldList;
      };
  };
  var dependencyRecordFoldNil = new DependencyRecordFold(function (v) {
      return function (v1) {
          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(Control_Category.identity(Record_Builder.categoryBuilder));
      };
  });
  var dependencyRecordFold = function (dict) {
      return dict.dependencyRecordFold;
  };
  var dependencyRecordFoldCons = function (dictDependencyRecordFold) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (dictLacks) {
                  return function (dictIsSymbol) {
                      return new DependencyRecordFold(function (v) {
                          return function (objects) {
                              return function __do() {
                                  var v1 = dependencyRecordFold(dictDependencyRecordFold)(Type_Data_RowList.RLProxy.value)(objects)();
                                  var v2 = Record_ST_Nested.peekLazyRef(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(objects)();
                                  return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert(dictCons1)(dictLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(v2))(v1);
                              };
                          };
                      });
                  };
              };
          };
      };
  };
  var dependencyRecordImpl = function (dictRowToList) {
      return function (dictDependencyRecordFold) {
          return new DependencyRecord(function (objects) {
              return function __do() {
                  var v = dependencyRecordFold(dictDependencyRecordFold)(Type_Data_RowList.RLProxy.value)(objects)();
                  return Record_Builder.build(v)({});
              };
          });
      };
  };
  var dependencyRecord = function (dict) {
      return dict.dependencyRecord;
  };
  var toEntityObjectsImpl = function (dictInitObjectRecord) {
      return function (dictDependencyRecord) {
          return function (dictPopulateObjectRecord) {
              return new ToEntityObjects(function (v) {
                  return function (constructors) {
                      return (function __do() {
                          var v1 = initObjectRecord(dictInitObjectRecord)(Type_Data_List.LProxy.value)();
                          var v2 = dependencyRecord(dictDependencyRecord)(v1)();
                          populateObjectRecord(dictPopulateObjectRecord)(Type_Data_List.LProxy.value)(constructors)(v2)(v1)();
                          return v2;
                      })();
                  };
              });
          };
      };
  };
  var constructorDependencyFoldNil = new ConstructorDependencyFold(function (v) {
      return function (v1) {
          return Control_Category.identity(Record_Builder.categoryBuilder);
      };
  });
  var constructorDependencyFold = function (dict) {
      return dict.constructorDependencyFold;
  };
  var constructorDependencyFoldCons = function (dictConstructorDependencyFold) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (dictLacks) {
                  return function (dictIsSymbol) {
                      return new ConstructorDependencyFold(function (v) {
                          return function (depRecord) {
                              return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert(dictCons1)(dictLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(depRecord)))(constructorDependencyFold(dictConstructorDependencyFold)(Type_Data_RowList.RLProxy.value)(depRecord));
                          };
                      });
                  };
              };
          };
      };
  };
  var constructorDependencyImpl = function (dictRowToList) {
      return function (dictConstructorDependencyFold) {
          return new ConstructorDependency(function (v) {
              return function (depRecord) {
                  return Record_Builder.build(constructorDependencyFold(dictConstructorDependencyFold)(Type_Data_RowList.RLProxy.value)(depRecord))({});
              };
          });
      };
  };
  var constructorDependency = function (dict) {
      return dict.constructorDependency;
  };
  var populateObjectRecordCons = function (dictGeneric) {
      return function (dictPopulateObjectRecord) {
          return function (dictCons) {
              return function (dictConstructorDependency) {
                  return function (dictCons1) {
                      return function (dictIsSymbol) {
                          return new PopulateObjectRecord(function (v) {
                              return function (constructors) {
                                  return function (deps) {
                                      return function (objects) {
                                          return function __do() {
                                              populateObjectRecord(dictPopulateObjectRecord)(Type_Data_List.LProxy.value)(constructors)(deps)(objects)();
                                              var constructor = Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(constructors);
                                              var args = constructorDependency(dictConstructorDependency)(Type_Row.RProxy.value)(deps);
                                              var gType = constructor(args);
                                              return Record_ST.modify(dictCons1)(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Function["const"](Data_Nullable.notNull(gType)))(objects)();
                                          };
                                      };
                                  };
                              };
                          });
                      };
                  };
              };
          };
      };
  };
  var colletDependeciesCons = function (dictCollectConstructors) {
      return function (dictGeneric) {
          return function (dictToObject) {
              return function (dictCons) {
                  return CollectConstructors;
              };
          };
      };
  };
  var collectEntitiesTraverseNil = CollectEntitiesTraverseImpl;
  var collectEntitiesTraverseInit = function (dictCollectEntitiesTraverseImpl) {
      return CollectEntitiesTraverse;
  };
  var collectEntitiesTraverseCons = function (dictCollectEntitiesTraverseImpl) {
      return function (dictCollectEntitiesImpl) {
          return CollectEntitiesTraverseImpl;
      };
  };
  var collectEntitiesImplNotContain = function (dictGeneric) {
      return function (dictRowToList) {
          return function (dictToFieldList) {
              return function (dictFetchRelationalFieldList) {
                  return function (dictSet) {
                      return function (dictCollectEntitiesTraverseImpl) {
                          return CollectEntitiesImplDispatch;
                      };
                  };
              };
          };
      };
  };
  var collectEntitiesImplDoesContain = CollectEntitiesImplDispatch;
  var collectEntitiesImplContainsPred = function (dictContainsPred) {
      return function (dictCollectEntitiesImplDispatch) {
          return CollectEntitiesImpl;
      };
  };
  var collectDependenciesNil = CollectConstructors;
  exports["constructorDependency"] = constructorDependency;
  exports["constructorDependencyFold"] = constructorDependencyFold;
  exports["dependencyRecord"] = dependencyRecord;
  exports["dependencyRecordFold"] = dependencyRecordFold;
  exports["initObjectRecord"] = initObjectRecord;
  exports["initObjectRecordFold"] = initObjectRecordFold;
  exports["populateObjectRecord"] = populateObjectRecord;
  exports["toEntityObjects"] = toEntityObjects;
  exports["toRootObject"] = toRootObject;
  exports["ToRootObject"] = ToRootObject;
  exports["ToEntityObjects"] = ToEntityObjects;
  exports["InitObjectRecord"] = InitObjectRecord;
  exports["InitObjectRecordFold"] = InitObjectRecordFold;
  exports["DependencyRecord"] = DependencyRecord;
  exports["DependencyRecordFold"] = DependencyRecordFold;
  exports["PopulateObjectRecord"] = PopulateObjectRecord;
  exports["ConstructorDependency"] = ConstructorDependency;
  exports["ConstructorDependencyFold"] = ConstructorDependencyFold;
  exports["FetchRelationalFieldList"] = FetchRelationalFieldList;
  exports["CollectEntitiesImpl"] = CollectEntitiesImpl;
  exports["CollectEntitiesImplDispatch"] = CollectEntitiesImplDispatch;
  exports["CollectEntitiesTraverse"] = CollectEntitiesTraverse;
  exports["CollectEntitiesTraverseImpl"] = CollectEntitiesTraverseImpl;
  exports["CollectConstructors"] = CollectConstructors;
  exports["toRootObjectImpl"] = toRootObjectImpl;
  exports["toEntityObjectsImpl"] = toEntityObjectsImpl;
  exports["initObjectRecordImpl"] = initObjectRecordImpl;
  exports["initObjectRecordFoldNil"] = initObjectRecordFoldNil;
  exports["initObjectRecordFoldCons"] = initObjectRecordFoldCons;
  exports["dependencyRecordImpl"] = dependencyRecordImpl;
  exports["dependencyRecordFoldNil"] = dependencyRecordFoldNil;
  exports["dependencyRecordFoldCons"] = dependencyRecordFoldCons;
  exports["populateObjectRecordNil"] = populateObjectRecordNil;
  exports["populateObjectRecordCons"] = populateObjectRecordCons;
  exports["constructorDependencyImpl"] = constructorDependencyImpl;
  exports["constructorDependencyFoldNil"] = constructorDependencyFoldNil;
  exports["constructorDependencyFoldCons"] = constructorDependencyFoldCons;
  exports["fetchRelationalFieldListNil"] = fetchRelationalFieldListNil;
  exports["fetchRelationalFieldListConsScalar"] = fetchRelationalFieldListConsScalar;
  exports["fetchRelationalFieldListConsRelational"] = fetchRelationalFieldListConsRelational;
  exports["collectEntitiesImplContainsPred"] = collectEntitiesImplContainsPred;
  exports["collectEntitiesImplDoesContain"] = collectEntitiesImplDoesContain;
  exports["collectEntitiesImplNotContain"] = collectEntitiesImplNotContain;
  exports["collectEntitiesTraverseInit"] = collectEntitiesTraverseInit;
  exports["collectEntitiesTraverseNil"] = collectEntitiesTraverseNil;
  exports["collectEntitiesTraverseCons"] = collectEntitiesTraverseCons;
  exports["collectDependenciesNil"] = collectDependenciesNil;
  exports["colletDependeciesCons"] = colletDependeciesCons;
})(PS["GraphQL.Type.Internal.ToRootObject"] = PS["GraphQL.Type.Internal.ToRootObject"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect_Aff = PS["Effect.Aff"];
  var Examples_ForumExample_Constructor = PS["Examples.ForumExample.Constructor"];
  var Examples_ForumExample_Constructor_Comment = PS["Examples.ForumExample.Constructor.Comment"];
  var Examples_ForumExample_Constructor_Post = PS["Examples.ForumExample.Constructor.Post"];
  var Examples_ForumExample_Constructor_User = PS["Examples.ForumExample.Constructor.User"];
  var Examples_ForumExample_Model = PS["Examples.ForumExample.Model"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var GraphQL_Type_Internal_NullableAndMaybe = PS["GraphQL.Type.Internal.NullableAndMaybe"];
  var GraphQL_Type_Internal_NullableAndMaybeRec = PS["GraphQL.Type.Internal.NullableAndMaybeRec"];
  var GraphQL_Type_Internal_ToInputObject = PS["GraphQL.Type.Internal.ToInputObject"];
  var GraphQL_Type_Internal_ToObject = PS["GraphQL.Type.Internal.ToObject"];
  var GraphQL_Type_Internal_ToRootObject = PS["GraphQL.Type.Internal.ToRootObject"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_List = PS["Type.Data.List"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Utils = PS["Type.Utils"];
  var userResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
          id: v.args.id + "_user"
      }));
  };
  var postsResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(function (n) {
          return {
              id: Data_Show.show(Data_Show.showInt)(n) + "_posts"
          };
      })(Data_Array.range(1)(v.args.limit)));
  };
  var postResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
          id: v.args.id + "_post"
      }));
  };
  var genericQuery = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var queryConstructor = GraphQL_Type_Internal_ToRootObject.toRootObject(GraphQL_Type_Internal_ToRootObject.toRootObjectImpl(genericQuery)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalMaybeTarget(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalMaybeTarget(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalMaybeTarget(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListNil)(Type_Data_List.setImpl(Type_Data_List.removeNil)))(Type_Data_List.setImpl(Type_Data_List.removeConsNotEqual(Type_Data_List.removeNil))))(Type_Data_List.setImpl(Type_Data_List.removeConsIsEqual(Type_Data_List.removeConsNotEqual(Type_Data_List.removeNil)))))(Type_Data_List.setImpl(Type_Data_List.removeConsNotEqual(Type_Data_List.removeConsNotEqual(Type_Data_List.removeNil)))))(Type_Data_List.setImpl(Type_Data_List.removeConsIsEqual(Type_Data_List.removeConsNotEqual(Type_Data_List.removeConsNotEqual(Type_Data_List.removeNil))))))(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseInit(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseCons(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseCons(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseCons(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseNil)(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplContainsPred(Type_Data_List.containsPredNil)(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplNotContain(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsScalar(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListNil)(Type_Data_List.setImpl(Type_Data_List.removeNil))))(Type_Data_List.setImpl(Type_Data_List.removeConsNotEqual(Type_Data_List.removeNil))))(Type_Data_List.setImpl(Type_Data_List.removeNil))(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseCons(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseCons(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseNil)(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplContainsPred(Type_Data_List.containsPredCons(Type_Data_List.containsPredNil)(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orFalse))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplNotContain(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsScalar(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListNil))(Type_Data_List.setImpl(Type_Data_List.removeNil)))(Type_Data_List.setImpl(Type_Data_List.removeConsNotEqual(Type_Data_List.removeNil))))(Type_Data_List.setImpl(Type_Data_List.removeConsNotEqual(Type_Data_List.removeNil)))(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseCons(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseCons(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseNil)(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplContainsPred(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredNil)(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orFalse))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplNotContain(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsScalar(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListConsRelational(GraphQL_Type_Internal_ToRootObject.fetchRelationalFieldListNil)(Type_Data_List.setImpl(Type_Data_List.removeNil))))(Type_Data_List.setImpl(Type_Data_List.removeConsNotEqual(Type_Data_List.removeNil))))(Type_Data_List.setImpl(Type_Data_List.removeConsNotEqual(Type_Data_List.removeConsNotEqual(Type_Data_List.removeNil))))(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseCons(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseCons(GraphQL_Type_Internal_ToRootObject.collectEntitiesTraverseNil)(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplContainsPred(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredNil)(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredYes)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orTrue))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplDoesContain)))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplContainsPred(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredNil)(Type_Utils.isEqualPredYes)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orTrue))(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orTrue))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplDoesContain))))))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplContainsPred(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredNil)(Type_Utils.isEqualPredYes)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orTrue))(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orTrue))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplDoesContain))))))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplContainsPred(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredNil)(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredYes)(Type_Data_Boolean.orFalse))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplDoesContain))))))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplContainsPred(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredNil)(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredYes)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orTrue))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplDoesContain)))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplContainsPred(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredCons(Type_Data_List.containsPredNil)(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredNo)(Type_Data_Boolean.orFalse))(Type_Utils.isEqualPredYes)(Type_Data_Boolean.orFalse))(GraphQL_Type_Internal_ToRootObject.collectEntitiesImplDoesContain))))(GraphQL_Type_Internal_ToRootObject.colletDependeciesCons(GraphQL_Type_Internal_ToRootObject.colletDependeciesCons(GraphQL_Type_Internal_ToRootObject.colletDependeciesCons(GraphQL_Type_Internal_ToRootObject.collectDependenciesNil)(Examples_ForumExample_Model.genericUser)(GraphQL_Type_Internal_ToObject.toObjectImpl(Examples_ForumExample_Model.genericUser)(new Data_Symbol.IsSymbol(function () {
      return "User";
  }))()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredString)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarString)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversNil)())())())(GraphQL_Type_Internal_ToObject.toDepsNub(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsScalar(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsNil)(Examples_ForumExample_Model.genericPost)()))))(Examples_ForumExample_Model.genericComment)()))())(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowNil)(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredString)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarString)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "date";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "posts";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "posts";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "comments";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "comments";
  }))))())(Examples_ForumExample_Model.genericPost)(GraphQL_Type_Internal_ToObject.toObjectImpl(Examples_ForumExample_Model.genericPost)(new Data_Symbol.IsSymbol(function () {
      return "Post";
  }))()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalNoArg(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversNil)())())())(GraphQL_Type_Internal_ToObject.toDepsNub(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsScalar(GraphQL_Type_Internal_ToObject.toDepsNil)))(Examples_ForumExample_Model.genericComment)()))(Examples_ForumExample_Model.genericUser)()))())(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowNil)(GraphQL_Type_Internal_ToObject.toObjectRowDispatchScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "comments";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "comments";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalNoArgs(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe)))(new Data_Symbol.IsSymbol(function () {
      return "author";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "User";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "author";
  }))))())(Examples_ForumExample_Model.genericComment)(GraphQL_Type_Internal_ToObject.toObjectImpl(Examples_ForumExample_Model.genericComment)(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalNoArg(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalNoArg(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_ToObject.toResolversNil)())())())(GraphQL_Type_Internal_ToObject.toDepsNub(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsScalar(GraphQL_Type_Internal_ToObject.toDepsCons(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal_ToObject.toDepsImplDispatchIsRelational(GraphQL_Type_Internal_ToObject.toDepsNil)(Examples_ForumExample_Model.genericPost)()))))(Examples_ForumExample_Model.genericUser)()))())(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowNil)(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalNoArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe)))(new Data_Symbol.IsSymbol(function () {
      return "post";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "post";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchScalarNoArg(GraphQL_Type_Internal_ToObject.toScalarObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleListDispatchNotList(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toScalarObjectFieldHandleOutputListNotListId))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalNoArgs(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldNoArgImpl(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe)))(new Data_Symbol.IsSymbol(function () {
      return "author";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "User";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "author";
  }))))())(GraphQL_Type_Internal_ToRootObject.toEntityObjectsImpl(GraphQL_Type_Internal_ToRootObject.initObjectRecordImpl(GraphQL_Type_Internal_ToRootObject.initObjectRecordFoldCons(GraphQL_Type_Internal_ToRootObject.initObjectRecordFoldCons(GraphQL_Type_Internal_ToRootObject.initObjectRecordFoldCons(GraphQL_Type_Internal_ToRootObject.initObjectRecordFoldNil)(Examples_ForumExample_Model.genericUser)()()(new Data_Symbol.IsSymbol(function () {
      return "User";
  })))(Examples_ForumExample_Model.genericPost)()()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  })))(Examples_ForumExample_Model.genericComment)()()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))))(GraphQL_Type_Internal_ToRootObject.dependencyRecordImpl()(GraphQL_Type_Internal_ToRootObject.dependencyRecordFoldCons(GraphQL_Type_Internal_ToRootObject.dependencyRecordFoldCons(GraphQL_Type_Internal_ToRootObject.dependencyRecordFoldCons(GraphQL_Type_Internal_ToRootObject.dependencyRecordFoldNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "User";
  })))()()()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  })))()()()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))))(GraphQL_Type_Internal_ToRootObject.populateObjectRecordCons(Examples_ForumExample_Model.genericComment)(GraphQL_Type_Internal_ToRootObject.populateObjectRecordCons(Examples_ForumExample_Model.genericPost)(GraphQL_Type_Internal_ToRootObject.populateObjectRecordCons(Examples_ForumExample_Model.genericUser)(GraphQL_Type_Internal_ToRootObject.populateObjectRecordNil)()(GraphQL_Type_Internal_ToRootObject.constructorDependencyImpl()(GraphQL_Type_Internal_ToRootObject.constructorDependencyFoldCons(GraphQL_Type_Internal_ToRootObject.constructorDependencyFoldCons(GraphQL_Type_Internal_ToRootObject.constructorDependencyFoldNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  })))()()()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))))()(new Data_Symbol.IsSymbol(function () {
      return "User";
  })))()(GraphQL_Type_Internal_ToRootObject.constructorDependencyImpl()(GraphQL_Type_Internal_ToRootObject.constructorDependencyFoldCons(GraphQL_Type_Internal_ToRootObject.constructorDependencyFoldCons(GraphQL_Type_Internal_ToRootObject.constructorDependencyFoldNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "User";
  })))()()()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))))()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  })))()(GraphQL_Type_Internal_ToRootObject.constructorDependencyImpl()(GraphQL_Type_Internal_ToRootObject.constructorDependencyFoldCons(GraphQL_Type_Internal_ToRootObject.constructorDependencyFoldCons(GraphQL_Type_Internal_ToRootObject.constructorDependencyFoldNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "User";
  })))()()()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  }))))()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarId(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListMaybe))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListMaybe))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeBaseCase)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarId(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListMaybe))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListMaybe))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeBaseCase)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther)))(GraphQL_Type_Internal_ToObject.toResolversCons(GraphQL_Type_Internal_ToObject.toResolversRelationalWithArgs(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarId(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListMaybe))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListMaybe))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeBaseCase)))(GraphQL_Type_Internal_ToObject.toResolversNil)())())())())())(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowCons(GraphQL_Type_Internal_ToObject.toObjectRowNil)(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericUser)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarId(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListMaybe))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListMaybe))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeBaseCase))(new Data_Symbol.IsSymbol(function () {
      return "user";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "User";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "user";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "posts";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "posts";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericPost)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecWithArgs(GraphQL_Type_Internal_ToObject.parseListRelationalArray(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse))))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil)())))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarId(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListMaybe))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListMaybe))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeBaseCase))(new Data_Symbol.IsSymbol(function () {
      return "post";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Post";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "post";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarOther(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListNotMaybe))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredArray)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsList(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListNotMaybe))))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "limit";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeInt)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeOther))(new Data_Symbol.IsSymbol(function () {
      return "comments";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "comments";
  })))(GraphQL_Type_Internal_ToObject.toObjectRowDispatchRelationalWithArgs(Examples_ForumExample_Model.genericComment)()(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListCons(GraphQL_Type_Internal_ToObject.toFieldListNil)(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredId)(Type_Data_Boolean.ifTrue)))))(GraphQL_Type_Internal_ToObject.parseFieldSpecNoArg(GraphQL_Type_Internal_ToObject.parseListRelationalTarget(GraphQL_Type_Internal_ToObject.toFieldTypeImpl(GraphQL_Type_Internal.isScalarPredNo)(Type_Data_Boolean.ifFalse)))))(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsIsScalarId(GraphQL_Type_Internal_ToObject.fetchScalarFieldsConsNotScalar(GraphQL_Type_Internal_ToObject.fetchScalarFieldsNil))()))()()(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldWithArgsImpl(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToInputObject.isRecordPredOther)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalarId(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()()(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleDepListNotListMaybe))(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListIsListPred(GraphQL_Type_Internal.isListPredNo)(GraphQL_Type_Internal_ToObject.toRelationalObjectFieldHandleOutputListNotListMaybe))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeRecord()()(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.nullableToMaybeRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()())(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordCons(GraphQL_Type_Internal_NullableAndMaybeRec.fromMaybeToNullableRecRecordNil)(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(GraphQL_Type_Internal_NullableAndMaybeRec.nullableAndMaybeString)()()))(GraphQL_Type_Internal_NullableAndMaybe.nullableAndMaybeBaseCase))(new Data_Symbol.IsSymbol(function () {
      return "comment";
  }))()(new Data_Symbol.IsSymbol(function () {
      return "Comment";
  }))())()()(new Data_Symbol.IsSymbol(function () {
      return "comment";
  })))(new Data_Symbol.IsSymbol(function () {
      return "Query";
  })))(Type_Proxy["Proxy"].value)({
      User: Examples_ForumExample_Constructor_User.user,
      Post: Examples_ForumExample_Constructor_Post.post,
      Comment: Examples_ForumExample_Constructor_Comment.comment
  })(Type_Proxy["Proxy"].value);
  var commentsResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(function (n) {
          return {
              id: Data_Show.show(Data_Show.showInt)(n) + "_comments"
          };
      })(Data_Array.range(1)(v.args.limit)));
  };
  var commentResolver = function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
          id: v.args.id + "_comment"
      }));
  };
  var query = queryConstructor({
      user: userResolver,
      post: postResolver,
      comment: commentResolver,
      posts: postsResolver,
      comments: commentsResolver
  });
  exports["queryConstructor"] = queryConstructor;
  exports["userResolver"] = userResolver;
  exports["postResolver"] = postResolver;
  exports["commentResolver"] = commentResolver;
  exports["postsResolver"] = postsResolver;
  exports["commentsResolver"] = commentsResolver;
  exports["query"] = query;
  exports["genericQuery"] = genericQuery;
})(PS["Examples.ForumExample.Query"] = PS["Examples.ForumExample.Query"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Examples_ForumExample_Query = PS["Examples.ForumExample.Query"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var Prelude = PS["Prelude"];                 
  var schema = GraphQL_Type_Internal.schema(Examples_ForumExample_Query.query);
  exports["schema"] = schema;
})(PS["Examples.ForumExample.Schema"] = PS["Examples.ForumExample.Schema"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Node.Encoding"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 19, column 1 - line 19, column 39: " + [ v.constructor.name ]);
  });
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 31, column 1 - line 31, column 37: " + [ v.constructor.name ]);
  };
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Latin1"] = Latin1;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS["Node.Encoding"] = PS["Node.Encoding"] || {});
(function(exports) {
    "use strict";
  var http =require("http"); 

  exports.createServer = function (handleRequest) {
    return function () {
      return http.createServer(function (req, res) {
        handleRequest(req)(res)();
      });
    };
  };

  exports.listenImpl = function (server) {
    return function (port) {
      return function (hostname) {
        return function (backlog) {
          return function (done) {
            return function () {
              if (backlog !== null) {
                server.listen(port, hostname, backlog, done);
              } else {
                server.listen(port, hostname, done);
              }
            };
          };
        };
      };
    };
  };

  exports.setHeader = function (res) {
    return function (key) {
      return function (value) {
        return function () {
          res.setHeader(key, value);
        };
      };
    };
  };

  exports.setStatusCode = function (res) {
    return function (code) {
      return function () {
        res.statusCode = code;
      };
    };
  };
})(PS["Node.HTTP"] = PS["Node.HTTP"] || {});
(function(exports) {
    "use strict";

  exports.readChunkImpl = function (Left) {
    return function (Right) {
      return function (chunk) {
        if (chunk instanceof Buffer) {
          return Right(chunk);
        } else if (typeof chunk === "string") {
          return Left(chunk);
        } else {
          throw new Error(
            "Node.Stream.readChunkImpl: Unrecognised " +
            "chunk type; expected String or Buffer, got: " +
            chunk);
        }
      };
    };
  };

  exports.onDataEitherImpl = function (readChunk) {
    return function (r) {
      return function (f) {
        return function () {
          r.on("data", function (data) {
            f(readChunk(data))();
          });
        };
      };
    };
  };

  exports.onEnd = function (s) {
    return function (f) {
      return function () {
        s.on("end", f);
      };
    };
  };

  exports.write = function (w) {
    return function (chunk) {
      return function (done) {
        return function () {
          return w.write(chunk, null, done);
        };
      };
    };
  };

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };

  exports.end = function (w) {
    return function (done) {
      return function () {
        w.end(null, null, function () {
          done();
        });
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return function() {
        return buff.toString(enc);
      };
    };
  };
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Node.Buffer"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Node_Encoding = PS["Node.Encoding"];
  var Prelude = PS["Prelude"];
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };
  exports["toString"] = toString;
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Node.Stream"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Prelude = PS["Prelude"];                 
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  var readChunk = $foreign.readChunkImpl(Data_Either.Left.create)(Data_Either.Right.create);
  var onDataEither = function (r) {
      return function (cb) {
          return $foreign.onDataEitherImpl(readChunk)(r)(cb);
      };
  };
  var onData = function (r) {
      return function (cb) {
          var fromEither = function (x) {
              if (x instanceof Data_Either.Left) {
                  return Effect_Exception["throw"]("Stream encoding should not be set");
              };
              if (x instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(x.value0);
              };
              throw new Error("Failed pattern match at Node.Stream line 94, column 5 - line 98, column 17: " + [ x.constructor.name ]);
          };
          return onDataEither(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(fromEither));
      };
  };
  var onDataString = function (r) {
      return function (enc) {
          return function (cb) {
              return onData(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(Node_Buffer.toString(enc)));
          };
      };
  };
  exports["onData"] = onData;
  exports["onDataString"] = onDataString;
  exports["onDataEither"] = onDataEither;
  exports["writeString"] = writeString;
  exports["onEnd"] = $foreign.onEnd;
  exports["end"] = $foreign.end;
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Node.HTTP"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Foreign_Object = PS["Foreign.Object"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var responseAsStream = Unsafe_Coerce.unsafeCoerce;
  var requestURL = function ($4) {
      return $4.url;
  };
  var requestMethod = function ($5) {
      return $5.method;
  };
  var requestHeaders = function ($6) {
      return $6.headers;
  };
  var requestAsStream = Unsafe_Coerce.unsafeCoerce;
  var listen = function (server) {
      return function (opts) {
          return function (done) {
              return $foreign.listenImpl(server)(opts.port)(opts.hostname)(Data_Nullable.toNullable(opts.backlog))(done);
          };
      };
  };
  exports["listen"] = listen;
  exports["requestHeaders"] = requestHeaders;
  exports["requestMethod"] = requestMethod;
  exports["requestURL"] = requestURL;
  exports["requestAsStream"] = requestAsStream;
  exports["responseAsStream"] = responseAsStream;
  exports["createServer"] = $foreign.createServer;
  exports["setHeader"] = $foreign.setHeader;
  exports["setStatusCode"] = $foreign.setStatusCode;
})(PS["Node.HTTP"] = PS["Node.HTTP"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Ref = PS["Effect.Ref"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_HTTP = PS["Node.HTTP"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];                 
  var write = function (response) {
      return function (body) {
          var stream = Node_HTTP.responseAsStream(response);
          return Data_Functor["void"](Effect.functorEffect)(function __do() {
              var v = Node_Stream.writeString(stream)(Node_Encoding.UTF8.value)(body)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
              return Node_Stream.end(stream)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
          });
      };
  };
  var read = function (request) {
      return Effect_Aff.makeAff(function (done) {
          var stream = Node_HTTP.requestAsStream(request);
          return function __do() {
              var v = Effect_Ref["new"]("")();
              Node_Stream.onDataString(stream)(Node_Encoding.UTF8.value)(function (str) {
                  return Data_Functor["void"](Effect.functorEffect)(Effect_Ref.modify(Data_Semigroup.append(Data_Semigroup.semigroupString)(str))(v));
              })();
              Node_Stream.onEnd(stream)(function __do() {
                  var $3 = Effect_Ref.read(v)();
                  return done(Data_Either.Right.create($3))();
              })();
              return Effect_Aff.nonCanceler;
          };
      });
  };
  exports["read"] = read;
  exports["write"] = write;
})(PS["HTTPure.Body"] = PS["HTTPure.Body"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Foreign_Object = PS["Foreign.Object"];
  var HTTPure_Lookup = PS["HTTPure.Lookup"];
  var Node_HTTP = PS["Node.HTTP"];
  var Prelude = PS["Prelude"];                 
  var Headers = function (x) {
      return x;
  };
  var write = function (response) {
      return function (v) {
          return Data_Functor["void"](Effect.functorEffect)(Data_TraversableWithIndex.traverseWithIndex(Foreign_Object.traversableWithIndexObject)(Effect.applicativeEffect)(Node_HTTP.setHeader(response))(v));
      };
  }; 
  var read = function ($16) {
      return Headers(Node_HTTP.requestHeaders($16));
  }; 
  var empty = Foreign_Object.empty;
  exports["empty"] = empty;
  exports["read"] = read;
  exports["write"] = write;
})(PS["HTTPure.Headers"] = PS["HTTPure.Headers"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Node_HTTP = PS["Node.HTTP"];
  var Prelude = PS["Prelude"];                 
  var Get = (function () {
      function Get() {

      };
      Get.value = new Get();
      return Get;
  })();
  var Post = (function () {
      function Post() {

      };
      Post.value = new Post();
      return Post;
  })();
  var Put = (function () {
      function Put() {

      };
      Put.value = new Put();
      return Put;
  })();
  var Delete = (function () {
      function Delete() {

      };
      Delete.value = new Delete();
      return Delete;
  })();
  var Head = (function () {
      function Head() {

      };
      Head.value = new Head();
      return Head;
  })();
  var Connect = (function () {
      function Connect() {

      };
      Connect.value = new Connect();
      return Connect;
  })();
  var Options = (function () {
      function Options() {

      };
      Options.value = new Options();
      return Options;
  })();
  var Trace = (function () {
      function Trace() {

      };
      Trace.value = new Trace();
      return Trace;
  })();
  var Patch = (function () {
      function Patch() {

      };
      Patch.value = new Patch();
      return Patch;
  })();
  var read = function (request) {
      var v = Node_HTTP.requestMethod(request);
      if (v === "POST") {
          return Post.value;
      };
      if (v === "PUT") {
          return Put.value;
      };
      if (v === "DELETE") {
          return Delete.value;
      };
      if (v === "HEAD") {
          return Head.value;
      };
      if (v === "CONNECT") {
          return Connect.value;
      };
      if (v === "OPTIONS") {
          return Options.value;
      };
      if (v === "TRACE") {
          return Trace.value;
      };
      if (v === "PATCH") {
          return Patch.value;
      };
      return Get.value;
  };
  exports["Get"] = Get;
  exports["Post"] = Post;
  exports["Put"] = Put;
  exports["Delete"] = Delete;
  exports["Head"] = Head;
  exports["Connect"] = Connect;
  exports["Options"] = Options;
  exports["Trace"] = Trace;
  exports["Patch"] = Patch;
  exports["read"] = read;
})(PS["HTTPure.Method"] = PS["HTTPure.Method"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Node_HTTP = PS["Node.HTTP"];
  var Prelude = PS["Prelude"];                 
  var read = (function () {
      var split = function ($0) {
          return Data_String_Common.split(Data_String_Pattern.Pattern($0));
      };
      var nonempty = Data_Array.filter(Data_Eq.notEq(Data_Eq.eqString)(""));
      var first = function ($1) {
          return Data_Maybe.fromMaybe("")(Data_Array.head($1));
      };
      return function ($2) {
          return (function ($3) {
              return nonempty(split("/")(first($3)));
          })(split("?")(Node_HTTP.requestURL($2)));
      };
  })();
  exports["read"] = read;
})(PS["HTTPure.Path"] = PS["HTTPure.Path"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Tuple = PS["Data.Tuple"];
  var Foreign_Object = PS["Foreign.Object"];
  var Node_HTTP = PS["Node.HTTP"];
  var Prelude = PS["Prelude"];                 
  var read = (function () {
      var split = function ($1) {
          return Data_String_Common.split(Data_String_Pattern.Pattern($1));
      };
      var nonempty = Data_Array.filter(Data_Eq.notEq(Data_Eq.eqString)(""));
      var last = function ($2) {
          return Data_String_Common.joinWith("")(Data_Maybe.fromMaybe([  ])(Data_Array.tail($2)));
      };
      var first = function ($3) {
          return Data_Maybe.fromMaybe("")(Data_Array.head($3));
      };
      var toTuple = function (item) {
          var value = function (val) {
              var $0 = val === "";
              if ($0) {
                  return "true";
              };
              return val;
          };
          var itemParts = split("=")(item);
          return Data_Tuple.Tuple.create(first(itemParts))(value(last(itemParts)));
      };
      var toObject = function ($4) {
          return Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(toTuple)($4));
      };
      return function ($5) {
          return (function ($6) {
              return (function ($7) {
                  return toObject(nonempty($7));
              })(split("&")(last($6)));
          })(split("?")(Node_HTTP.requestURL($5)));
      };
  })();
  exports["read"] = read;
})(PS["HTTPure.Query"] = PS["HTTPure.Query"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Effect_Aff = PS["Effect.Aff"];
  var Foreign_Object = PS["Foreign.Object"];
  var HTTPure_Body = PS["HTTPure.Body"];
  var HTTPure_Headers = PS["HTTPure.Headers"];
  var HTTPure_Method = PS["HTTPure.Method"];
  var HTTPure_Path = PS["HTTPure.Path"];
  var HTTPure_Query = PS["HTTPure.Query"];
  var Node_HTTP = PS["Node.HTTP"];
  var Prelude = PS["Prelude"];
  var fromHTTPRequest = function (request) {
      return Control_Bind.bind(Effect_Aff.bindAff)(HTTPure_Body.read(request))(function (v) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
              method: HTTPure_Method.read(request),
              path: HTTPure_Path.read(request),
              query: HTTPure_Query.read(request),
              headers: HTTPure_Headers.read(request),
              body: v
          });
      });
  };
  exports["fromHTTPRequest"] = fromHTTPRequest;
})(PS["HTTPure.Request"] = PS["HTTPure.Request"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Effect = PS["Effect"];
  var Node_HTTP = PS["Node.HTTP"];
  var Prelude = PS["Prelude"];                 
  var write = Node_HTTP.setStatusCode;
  var ok = 200;            
  var notFound = 404;
  var badRequest = 400;
  exports["write"] = write;
  exports["ok"] = ok;
  exports["badRequest"] = badRequest;
  exports["notFound"] = notFound;
})(PS["HTTPure.Status"] = PS["HTTPure.Status"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var HTTPure_Body = PS["HTTPure.Body"];
  var HTTPure_Headers = PS["HTTPure.Headers"];
  var HTTPure_Status = PS["HTTPure.Status"];
  var Node_HTTP = PS["Node.HTTP"];
  var Prelude = PS["Prelude"];                 
  var send = function (httpresponse) {
      return function (v) {
          return function __do() {
              HTTPure_Status.write(httpresponse)(v.status)();
              HTTPure_Headers.write(httpresponse)(v.headers)();
              return HTTPure_Body.write(httpresponse)(v.body)();
          };
      };
  };
  var response$prime = function (status) {
      return function (headers) {
          return function (body) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                  status: status,
                  headers: headers,
                  body: body
              });
          };
      };
  };                                                               
  var ok$prime = response$prime(HTTPure_Status.ok);
  var ok = ok$prime(HTTPure_Headers.empty);      
  var emptyResponse$prime = function (status) {
      return function (headers) {
          return response$prime(status)(headers)("");
      };
  };                                                         
  var notFound$prime = emptyResponse$prime(HTTPure_Status.notFound);
  var notFound = notFound$prime(HTTPure_Headers.empty);
  var badRequest$prime = response$prime(HTTPure_Status.badRequest);
  var badRequest = badRequest$prime(HTTPure_Headers.empty);
  exports["send"] = send;
  exports["ok"] = ok;
  exports["badRequest"] = badRequest;
  exports["notFound"] = notFound;
})(PS["HTTPure.Response"] = PS["HTTPure.Response"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Options = PS["Data.Options"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var HTTPure_Request = PS["HTTPure.Request"];
  var HTTPure_Response = PS["HTTPure.Response"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS_Sync = PS["Node.FS.Sync"];
  var Node_HTTP = PS["Node.HTTP"];
  var Node_HTTP_Secure = PS["Node.HTTP.Secure"];
  var Prelude = PS["Prelude"];                 
  var listenOptions = function (port) {
      return {
          hostname: "localhost",
          port: port,
          backlog: Data_Maybe.Nothing.value
      };
  };
  var handleRequest = function (router) {
      return function (request) {
          return function (response) {
              return Data_Functor["void"](Effect.functorEffect)(Effect_Aff.runAff(function (v) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              })(Control_Bind.bind(Effect_Aff.bindAff)(HTTPure_Request.fromHTTPRequest(request))(function (v) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(router(v))(function ($7) {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(HTTPure_Response.send(response)($7));
                  });
              })));
          };
      };
  };
  var serve$prime = function (options) {
      return function (router) {
          return function (onStarted) {
              return function __do() {
                  var server = Node_HTTP.createServer(handleRequest(router))();
                  return Node_HTTP.listen(server)(options)(onStarted)();
              };
          };
      };
  };
  var serve = function ($8) {
      return serve$prime(listenOptions($8));
  };
  exports["serve"] = serve;
})(PS["HTTPure.Server"] = PS["HTTPure.Server"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode = PS["Data.Argonaut.Decode"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Console = PS["Effect.Console"];
  var Effect_Exception = PS["Effect.Exception"];
  var Examples_ForumExample_Schema = PS["Examples.ForumExample.Schema"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var HTTPure = PS["HTTPure"];
  var HTTPure_Method = PS["HTTPure.Method"];
  var HTTPure_Response = PS["HTTPure.Response"];
  var HTTPure_Server = PS["HTTPure.Server"];
  var Prelude = PS["Prelude"];                 
  var decodeParams = function (json) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(v)("query"))(function (v1) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonJson)(v)("variables"))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonString)(v)("operationName"))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          query: v1,
                          variables: v2,
                          operationName: v3
                      });
                  });
              });
          });
      });
  };
  var createRouter = function (v) {
      if (v.method instanceof HTTPure_Method.Post && (v.path.length === 1 && v["path"][0] === "graphql")) {
          var v1 = Control_Bind.bindFlipped(Data_Either.bindEither)(decodeParams)(Data_Argonaut_Parser.jsonParser(v.body));
          if (v1 instanceof Data_Either.Left) {
              return HTTPure_Response.badRequest(v1.value0);
          };
          if (v1 instanceof Data_Either.Right) {
              return Control_Bind.bindFlipped(Effect_Aff.bindAff)(function ($22) {
                  return HTTPure_Response.ok(Data_Argonaut_Core.stringify($22));
              })(GraphQL_Type_Internal.graphql(Examples_ForumExample_Schema.schema)(v1.value0.query)(Data_Unit.unit)(Data_Unit.unit)(v1.value0.variables)(v1.value0.operationName));
          };
          throw new Error("Failed pattern match at Main line 34, column 3 - line 42, column 75: " + [ v1.constructor.name ]);
      };
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.logShow(Data_Show.showArray(Data_Show.showString))(v.path)))(function () {
          return HTTPure_Response.notFound;
      });
  };
  var main = Effect_Aff.runAff_(Data_Either.either(function ($23) {
      return Effect_Console.error(Data_Show.show(Effect_Exception.showError)($23));
  })(Control_Applicative.pure(Effect.applicativeEffect)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(HTTPure_Server.serve(8080)(createRouter)(Effect_Console.log("listening at localhost:8080"))));
  exports["decodeParams"] = decodeParams;
  exports["createRouter"] = createRouter;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();