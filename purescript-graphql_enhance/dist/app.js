// Generated by purs bundle 0.12.1
var PS = {};
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
})(PS["Data.Generic.Rep"] = PS["Data.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  const G = require("graphql")

  // NOTE testing
  exports.int = "GraphQLInt"
  // exports.int = G.GraphQLInt

  // NOTE testing
  exports.float = "GraphQLFloat"
  // exports.float = G.GraphQLFloat

  // NOTE testing
  exports.string = "GraphQLString"
  // exports.string = G.GraphQLString

  // NOTE testing
  exports.id = "GraphQLID"
  // exports.id = G.GraphQLID

  // NOTE testing
  exports.boolean = "GraphQLBoolean"
  // exports.boolean = G.GraphQLBoolean

  exports._nonNull = function (type) {
    // NOTE testing
    return { "nonNull": type }

    // return new G.GraphQLNonNull(type)
  }

  exports._list = function (type) {
    // NOTE testing
    return { "GraphQLList": type }

    // return new G.GraphQLList(type)
  }

  // exports._objectTypeField = function (type, args, resolve, description) {
  //   return { type, args, resolve, description }
  // }

  exports._inputObjectType = function (inputObjectRecord) {
    // NOTE testing
    return  { "GraphQLInputObjectType": inputObjectRecord }

    // return new G.GraphQLInputObjectType(inputObjectRecord)
  }
})(PS["GraphQL.Type.Internal"] = PS["GraphQL.Type.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Type_Proxy = PS["Type.Proxy"];                 
  var BProxy = (function () {
      function BProxy() {

      };
      BProxy.value = new BProxy();
      return BProxy;
  })();
  exports["BProxy"] = BProxy;
})(PS["Type.Data.Boolean"] = PS["Type.Data.Boolean"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["GraphQL.Type.Internal"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var IsScalarPred = {};
  var IsScalar = function (toScalar) {
      this.toScalar = toScalar;
  };
  var IsListPred = {};
  var IsList = function (toList) {
      this.toList = toList;
  };
  var toScalar = function (dict) {
      return dict.toScalar;
  };
  var toList = function (dict) {
      return dict.toList;
  };
  var nonNull = function (gType) {
      return $foreign._nonNull(gType);
  };
  var list = function (gType) {
      return $foreign._list(gType);
  };                            
  var isScalarString = new IsScalar(nonNull($foreign.string));
  var isScalarPredString = IsScalarPred;
  var isScalarPredNumber = IsScalarPred;
  var isScalarPredNo = IsScalarPred;          
  var isScalarPredInt = IsScalarPred;
  var isScalarPredId = IsScalarPred;
  var isScalarPredBoolean = IsScalarPred;
  var isScalarNumber = new IsScalar(nonNull($foreign["float"]));
  var isScalarInt = new IsScalar(nonNull($foreign["int"]));
  var isScalarId = new IsScalar(nonNull($foreign.id));
  var isScalarBoolean = new IsScalar(nonNull($foreign["boolean"]));
  var isListPredNo = IsListPred;
  var isListPredArray = IsListPred;
  var isListArray = new IsList(function (gType) {
      return nonNull(list(gType));
  });
  var inputObjectType = function (config) {
      return $foreign._inputObjectType(config);
  };
  exports["toList"] = toList;
  exports["toScalar"] = toScalar;
  exports["nonNull"] = nonNull;
  exports["list"] = list;
  exports["inputObjectType"] = inputObjectType;
  exports["IsScalarPred"] = IsScalarPred;
  exports["IsScalar"] = IsScalar;
  exports["IsListPred"] = IsListPred;
  exports["IsList"] = IsList;
  exports["isScalarPredInt"] = isScalarPredInt;
  exports["isScalarPredNumber"] = isScalarPredNumber;
  exports["isScalarPredString"] = isScalarPredString;
  exports["isScalarPredId"] = isScalarPredId;
  exports["isScalarPredBoolean"] = isScalarPredBoolean;
  exports["isScalarPredNo"] = isScalarPredNo;
  exports["isScalarInt"] = isScalarInt;
  exports["isScalarNumber"] = isScalarNumber;
  exports["isScalarString"] = isScalarString;
  exports["isScalarId"] = isScalarId;
  exports["isScalarBoolean"] = isScalarBoolean;
  exports["isListPredArray"] = isListPredArray;
  exports["isListPredNo"] = isListPredNo;
  exports["isListArray"] = isListArray;
})(PS["GraphQL.Type.Internal"] = PS["GraphQL.Type.Internal"] || {});
(function(exports) {
    "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Equality = PS["Type.Equality"];                 
  var RProxy = (function () {
      function RProxy() {

      };
      RProxy.value = new RProxy();
      return RProxy;
  })();
  exports["RProxy"] = RProxy;
})(PS["Type.Row"] = PS["Type.Row"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Record.Builder"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_Unsafe_Union = PS["Record.Unsafe.Union"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var insert = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
    "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Boolean_Utils = PS["Type.Data.Boolean.Utils"];
  var Type_Data_RowList_Utils = PS["Type.Data.RowList.Utils"];
  var Type_Utils = PS["Type.Utils"];

  // | IsRecordPred
  var IsRecordPred = {};
  var isRecordPredYes = IsRecordPred;
  var isRecordPredNo = IsRecordPred;
  exports["IsRecordPred"] = IsRecordPred;
  exports["isRecordPredYes"] = isRecordPredYes;
  exports["isRecordPredNo"] = isRecordPredNo;
})(PS["Type.Row.Utils"] = PS["Type.Row.Utils"] || {});
(function(exports) {
    "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Symbol = PS["Data.Symbol"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var Prelude = PS["Prelude"];
  var Record_Builder = PS["Record.Builder"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_RowList = PS["Type.Data.RowList"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];
  var Type_Row_Utils = PS["Type.Row.Utils"];                 
  var ToInputObject = function (toInputObject) {
      this.toInputObject = toInputObject;
  };
  var ToInputObjectWithPath = function (toInputObjectWithPath) {
      this.toInputObjectWithPath = toInputObjectWithPath;
  };
  var ToInputObjectRowList = function (toInputObjectRowList) {
      this.toInputObjectRowList = toInputObjectRowList;
  };
  var ToInputObjectType = function (toInputObjectType) {
      this.toInputObjectType = toInputObjectType;
  };
  var ToInputObjectTypeDispatch = function (toInputObjectTypeDispatch) {
      this.toInputObjectTypeDispatch = toInputObjectTypeDispatch;
  };
  var toInputObjectWithPath = function (dict) {
      return dict.toInputObjectWithPath;
  };
  var toInputObjectTypeDispatch = function (dict) {
      return dict.toInputObjectTypeDispatch;
  };
  var toInputObjectType = function (dict) {
      return dict.toInputObjectType;
  };
  var toInputObjectRowListNil = new ToInputObjectRowList(function (v) {
      return function (v1) {
          return Control_Category.identity(Record_Builder.categoryBuilder);
      };
  });
  var toInputObjectRowList = function (dict) {
      return dict.toInputObjectRowList;
  };
  var toInputObjectRowListCons = function (dictToInputObjectType) {
      return function (dictToInputObjectRowList) {
          return function (dictCons) {
              return function (dictLacks) {
                  return function (dictIsSymbol) {
                      return new ToInputObjectRowList(function (pathP) {
                          return function (v) {
                              return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert(dictCons)(dictLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)({
                                  type: toInputObjectType(dictToInputObjectType)(Data_Symbol.SProxy.value)(pathP)(Type_Proxy["Proxy"].value)
                              }))(toInputObjectRowList(dictToInputObjectRowList)(pathP)(Type_Data_RowList.RLProxy.value));
                          };
                      });
                  };
              };
          };
      };
  };
  var toInputObjectWithPathToRowList = function (dictRowToList) {
      return function (dictToInputObjectRowList) {
          return new ToInputObjectWithPath(function (v) {
              return function (v1) {
                  return Record_Builder.build(toInputObjectRowList(dictToInputObjectRowList)(Data_Symbol.SProxy.value)(Type_Data_RowList.RLProxy.value))({});
              };
          });
      };
  };
  var toInputObjectInit = function (dictToInputObjectWithPath) {
      return new ToInputObject(function (i) {
          return toInputObjectWithPath(dictToInputObjectWithPath)(Data_Symbol.SProxy.value)(i);
      });
  };
  var toInputObjectFieldIsScalar = function (dictIsScalar) {
      return new ToInputObjectTypeDispatch(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          return function (v5) {
                              return GraphQL_Type_Internal.toScalar(dictIsScalar);
                          };
                      };
                  };
              };
          };
      });
  };
  var toInputObjectFieldIsRecord = function (dictAppend) {
      return function (dictAppend1) {
          return function (dictToInputObjectWithPath) {
              return function (dictIsSymbol) {
                  return new ToInputObjectTypeDispatch(function (v) {
                      return function (v1) {
                          return function (v2) {
                              return function (v3) {
                                  return function (v4) {
                                      return function (v5) {
                                          var fields = toInputObjectWithPath(dictToInputObjectWithPath)(Data_Symbol.SProxy.value)(Type_Row.RProxy.value);
                                          return GraphQL_Type_Internal.inputObjectType({
                                              name: Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value),
                                              fields: fields
                                          });
                                      };
                                  };
                              };
                          };
                      };
                  });
              };
          };
      };
  };
  var toInputObjectFieldIsNewType = function (dictNewtype) {
      return function (dictGeneric) {
          return function (dictAppend) {
              return function (dictAppend1) {
                  return function (dictAppend2) {
                      return function (dictAppend3) {
                          return function (dictToInputObjectWithPath) {
                              return function (dictIsSymbol) {
                                  return new ToInputObjectTypeDispatch(function (v) {
                                      return function (v1) {
                                          return function (v2) {
                                              return function (v3) {
                                                  return function (v4) {
                                                      return function (v5) {
                                                          var fields = toInputObjectWithPath(dictToInputObjectWithPath)(Data_Symbol.SProxy.value)(Type_Row.RProxy.value);
                                                          return GraphQL_Type_Internal.inputObjectType({
                                                              name: Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value),
                                                              fields: fields
                                                          });
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var toInputObjectFieldIsList = function (dictAppend) {
      return function (dictToInputObjectType) {
          return function (dictIsList) {
              return new ToInputObjectTypeDispatch(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return function (v3) {
                              return function (v4) {
                                  return function (v5) {
                                      var item = toInputObjectType(dictToInputObjectType)(Data_Symbol.SProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value);
                                      return GraphQL_Type_Internal.toList(dictIsList)(item);
                                  };
                              };
                          };
                      };
                  };
              });
          };
      };
  };
  var toInputObjectFieldDispatch = function (dictIsScalarPred) {
      return function (dictIsListPred) {
          return function (dictIsRecordPred) {
              return function (dictToInputObjectTypeDispatch) {
                  return new ToInputObjectType(function (v) {
                      return function (v1) {
                          return function (v2) {
                              return toInputObjectTypeDispatch(dictToInputObjectTypeDispatch)(Type_Data_Boolean.BProxy.value)(Type_Data_Boolean.BProxy.value)(Type_Data_Boolean.BProxy.value)(Data_Symbol.SProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value);
                          };
                      };
                  });
              };
          };
      };
  };
  var toInputObject = function (dict) {
      return dict.toInputObject;
  };
  exports["toInputObject"] = toInputObject;
  exports["toInputObjectRowList"] = toInputObjectRowList;
  exports["toInputObjectType"] = toInputObjectType;
  exports["toInputObjectTypeDispatch"] = toInputObjectTypeDispatch;
  exports["toInputObjectWithPath"] = toInputObjectWithPath;
  exports["ToInputObject"] = ToInputObject;
  exports["ToInputObjectWithPath"] = ToInputObjectWithPath;
  exports["ToInputObjectRowList"] = ToInputObjectRowList;
  exports["ToInputObjectType"] = ToInputObjectType;
  exports["ToInputObjectTypeDispatch"] = ToInputObjectTypeDispatch;
  exports["toInputObjectInit"] = toInputObjectInit;
  exports["toInputObjectWithPathToRowList"] = toInputObjectWithPathToRowList;
  exports["toInputObjectRowListNil"] = toInputObjectRowListNil;
  exports["toInputObjectRowListCons"] = toInputObjectRowListCons;
  exports["toInputObjectFieldDispatch"] = toInputObjectFieldDispatch;
  exports["toInputObjectFieldIsScalar"] = toInputObjectFieldIsScalar;
  exports["toInputObjectFieldIsList"] = toInputObjectFieldIsList;
  exports["toInputObjectFieldIsRecord"] = toInputObjectFieldIsRecord;
  exports["toInputObjectFieldIsNewType"] = toInputObjectFieldIsNewType;
})(PS["GraphQL.Type.Internal.ToInputObject"] = PS["GraphQL.Type.Internal.ToInputObject"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var GraphQL_Type_Internal = PS["GraphQL.Type.Internal"];
  var GraphQL_Type_Internal_ToInputObject = PS["GraphQL.Type.Internal.ToInputObject"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var Type_Row_Utils = PS["Type.Row.Utils"];                 
  var User = function (x) {
      return x;
  };
  var newtypeUser = new Data_Newtype.Newtype(function (n) {
      return n;
  }, User);
  var genericUser = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var main = (function () {
      var test = GraphQL_Type_Internal_ToInputObject.toInputObject(GraphQL_Type_Internal_ToInputObject.toInputObjectInit(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsNewType(newtypeUser)(genericUser)()()()()(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredString)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarString)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()(new Data_Symbol.IsSymbol(function () {
          return "name";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))))(new Data_Symbol.IsSymbol(function () {
          return "_author-User";
      }))))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredBoolean)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarBoolean)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredYes)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsRecord()()(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredString)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarString)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()(new Data_Symbol.IsSymbol(function () {
          return "id";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "content";
      }))))(new Data_Symbol.IsSymbol(function () {
          return "_comment";
      }))))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredYes)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsRecord()()(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredString)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarString)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal.isListPredArray)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsList()(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredYes)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsRecord()()(GraphQL_Type_Internal_ToInputObject.toInputObjectWithPathToRowList()(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredString)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarString)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()(new Data_Symbol.IsSymbol(function () {
          return "todo";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))))(new Data_Symbol.IsSymbol(function () {
          return "_content_todoList-Item";
      }))))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()(new Data_Symbol.IsSymbol(function () {
          return "todoList";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "date";
      }))))(new Data_Symbol.IsSymbol(function () {
          return "_content";
      }))))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredId)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarId)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredNo)(GraphQL_Type_Internal.isListPredArray)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsList()(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredInt)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarInt)))(GraphQL_Type_Internal.isListArray)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredNumber)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarNumber)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListCons(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldDispatch(GraphQL_Type_Internal.isScalarPredString)(GraphQL_Type_Internal.isListPredNo)(Type_Row_Utils.isRecordPredNo)(GraphQL_Type_Internal_ToInputObject.toInputObjectFieldIsScalar(GraphQL_Type_Internal.isScalarString)))(GraphQL_Type_Internal_ToInputObject.toInputObjectRowListNil)()()(new Data_Symbol.IsSymbol(function () {
          return "str";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "num";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "listInt";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "int";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "id";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "content";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "comment";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "bool";
      })))()()(new Data_Symbol.IsSymbol(function () {
          return "author";
      })))))(Type_Row.RProxy.value);
    const _inspect = require("util").inspect
    const inspect = x => { console.log(_inspect(x, {depth: 15})) }
    inspect(test)

      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
  })();
  exports["User"] = User;
  exports["main"] = main;
  exports["newtypeUser"] = newtypeUser;
  exports["genericUser"] = genericUser;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
