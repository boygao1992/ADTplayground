// Generated by purs bundle 0.12.1
var PS = {};
(function(exports) {exports.unsafeReadSTRef = function (ref) {
    return function () {
      console.log("unsafe: " + ref)
      return ref.value
    }
  }
})(PS["Control.Monad.ST.Unsafe"] = PS["Control.Monad.ST.Unsafe"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["Control.Monad.ST.Unsafe"];
  var Control_Monad_ST_Ref = PS["Control.Monad.ST.Ref"];
  exports["unsafeReadSTRef"] = $foreign.unsafeReadSTRef;
})(PS["Control.Monad.ST.Unsafe"] = PS["Control.Monad.ST.Unsafe"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  exports["cons"] = $foreign.cons;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Effect.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
    "use strict";

  function copyRecord(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  } 

  exports.thaw = function(rec) {
    return function() {
      return copyRecord(rec);
    };
  };
})(PS["Record.ST"] = PS["Record.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Record.ST"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  exports["thaw"] = $foreign.thaw;
})(PS["Record.ST"] = PS["Record.ST"] || {});
(function(exports) {exports.unsafePathPeek = function (path, ref) {
    return function () {
      var pointer = ref
      path.forEach(function (node) {
        pointer = pointer[node]
      })
      return pointer
    }
  }

  exports.unsafePathPeekSTRef = function (path, ref) {
    return function () {
      var pointer = ref
      path.forEach(function (node) {
        pointer = pointer[node]
      })
      console.log("unsafePathPeekSTRef: "+ JSON.stringify(pointer))
      return { value: pointer }
    }
  }

  exports.unsafePathModify = function (path, f, ref) {
    return function () {
      var pointer = ref
      path.slice(0, -1).forEach(function (node) {
        pointer = pointer[node]
      })
      var field = path.slice(-1)[0]
      console.log("unsafePathModify: " + JSON.stringify(pointer) + "[" + field + "]" + " = " + JSON.stringify(f(pointer[field])))
      console.log(f()())
      pointer[field] = f(pointer[field])
      return {}
    }
  }
})(PS["Record.ST.Nested"] = PS["Record.ST.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Record.ST.Nested"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Ref = PS["Control.Monad.ST.Ref"];
  var Data_Array = PS["Data.Array"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_ST = PS["Record.ST"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];                 
  var PLProxy = (function () {
      function PLProxy() {

      };
      PLProxy.value = new PLProxy();
      return PLProxy;
  })();
  var RowPListAccess = {};
  var RowPListAccessRecord = {};
  var ReversePList = {};
  var ReversePListImpl = {};
  var PListToArray = function (pListToArray) {
      this.pListToArray = pListToArray;
  };
  var ParsePath = {};
  var ParsePathImpl = {};
  var ParsePathDispatch = {};
  var rowPListAccessRecordInductionStep = function (dictCons) {
      return function (dictRowPListAccessRecord) {
          return RowPListAccessRecord;
      };
  };
  var rowPListAccessRecordBaseCase2 = function (dictCons) {
      return RowPListAccessRecord;
  };
  var rowPListAccessInductionStep = function (dictCons) {
      return function (dictRowPListAccess) {
          return RowPListAccess;
      };
  };
  var rowPListAccessBaseCase2 = function (dictCons) {
      return RowPListAccess;
  };
  var reversePListImplInductionStep = function (dictReversePListImpl) {
      return ReversePListImpl;
  };
  var reversePListImplBaseCase = ReversePListImpl;
  var reversePListImpl = function (dictReversePListImpl) {
      return ReversePList;
  };                                         
  var pathParseImplBaseCase2 = ParsePathImpl;
  var parsePathImplDispatch = function (dictCons) {
      return function (dictParsePathDispatch) {
          return ParsePathImpl;
      };
  };
  var parsePathImpl = function (dictParsePathImpl) {
      return function (dictReversePList) {
          return ParsePath;
      };
  };
  var parsePathDispatchInductionStep = function (dictAppend) {
      return function (dictParsePathImpl) {
          return ParsePathDispatch;
      };
  };
  var parsePathDispatchBaseCase2 = function (dictParsePathImpl) {
      return ParsePathDispatch;
  };
  var pListToArrayBaseCase = new PListToArray(function (v) {
      return [  ];
  });
  var pListToArray = function (dict) {
      return dict.pListToArray;
  };
  var pListToArrayInductionStep = function (dictIsSymbol) {
      return function (dictPListToArray) {
          return new PListToArray(function (v) {
              return Data_Array.cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))(pListToArray(dictPListToArray)(PLProxy.value));
          });
      };
  };
  var pathModify = function (dictParsePath) {
      return function (dictRowPListAccess) {
          return function (dictPListToArray) {
              return function (v) {
                  return Data_Function_Uncurried.runFn3($foreign.unsafePathModify)(pListToArray(dictPListToArray)(PLProxy.value));
              };
          };
      };
  };
  var pathPeek = function (dictParsePath) {
      return function (dictRowPListAccess) {
          return function (dictPListToArray) {
              return function (v) {
                  return Data_Function_Uncurried.runFn2($foreign.unsafePathPeek)(pListToArray(dictPListToArray)(PLProxy.value));
              };
          };
      };
  };
  var pathPeekSTRef = function (dictParsePath) {
      return function (dictRowPListAccessRecord) {
          return function (dictPListToArray) {
              return function (v) {
                  return Data_Function_Uncurried.runFn2($foreign.unsafePathPeekSTRef)(pListToArray(dictPListToArray)(PLProxy.value));
              };
          };
      };
  };
  exports["pListToArray"] = pListToArray;
  exports["PLProxy"] = PLProxy;
  exports["RowPListAccess"] = RowPListAccess;
  exports["RowPListAccessRecord"] = RowPListAccessRecord;
  exports["ReversePList"] = ReversePList;
  exports["ReversePListImpl"] = ReversePListImpl;
  exports["PListToArray"] = PListToArray;
  exports["ParsePath"] = ParsePath;
  exports["ParsePathImpl"] = ParsePathImpl;
  exports["ParsePathDispatch"] = ParsePathDispatch;
  exports["pathPeek"] = pathPeek;
  exports["pathPeekSTRef"] = pathPeekSTRef;
  exports["pathModify"] = pathModify;
  exports["rowPListAccessBaseCase2"] = rowPListAccessBaseCase2;
  exports["rowPListAccessInductionStep"] = rowPListAccessInductionStep;
  exports["rowPListAccessRecordBaseCase2"] = rowPListAccessRecordBaseCase2;
  exports["rowPListAccessRecordInductionStep"] = rowPListAccessRecordInductionStep;
  exports["reversePListImpl"] = reversePListImpl;
  exports["reversePListImplBaseCase"] = reversePListImplBaseCase;
  exports["reversePListImplInductionStep"] = reversePListImplInductionStep;
  exports["pListToArrayBaseCase"] = pListToArrayBaseCase;
  exports["pListToArrayInductionStep"] = pListToArrayInductionStep;
  exports["parsePathImpl"] = parsePathImpl;
  exports["pathParseImplBaseCase2"] = pathParseImplBaseCase2;
  exports["parsePathImplDispatch"] = parsePathImplDispatch;
  exports["parsePathDispatchBaseCase2"] = parsePathDispatchBaseCase2;
  exports["parsePathDispatchInductionStep"] = parsePathDispatchInductionStep;
})(PS["Record.ST.Nested"] = PS["Record.ST.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Monad_ST_Unsafe = PS["Control.Monad.ST.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Effect_Console = PS["Effect.Console"];
  var Effect_Ref = PS["Effect.Ref"];
  var Prelude = PS["Prelude"];
  var Record_ST = PS["Record.ST"];
  var Record_ST_Nested = PS["Record.ST.Nested"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];                 
  var main = Effect_Console.logShow(Data_Show.showString)((function __do() {
      var v = Record_ST.thaw({
          a: {
              b: {
                  c: "wenbo"
              }
          }
      })();
      var v1 = Record_ST.thaw({
          b: {
              c: "robot"
          }
      })();
      var v2 = Record_ST_Nested.pathPeekSTRef(Record_ST_Nested.parsePathImpl(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchInductionStep()(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchBaseCase2(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchInductionStep()(Record_ST_Nested.pathParseImplBaseCase2)))))))(Record_ST_Nested.reversePListImpl(Record_ST_Nested.reversePListImplInductionStep(Record_ST_Nested.reversePListImplInductionStep(Record_ST_Nested.reversePListImplBaseCase)))))(Record_ST_Nested.rowPListAccessRecordInductionStep()(Record_ST_Nested.rowPListAccessRecordBaseCase2()))(Record_ST_Nested.pListToArrayInductionStep(new Data_Symbol.IsSymbol(function () {
          return "a";
      }))(Record_ST_Nested.pListToArrayInductionStep(new Data_Symbol.IsSymbol(function () {
          return "b";
      }))(Record_ST_Nested.pListToArrayBaseCase)))(Data_Symbol.SProxy.value)(v)();
      Record_ST_Nested.pathModify(Record_ST_Nested.parsePathImpl(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchInductionStep()(Record_ST_Nested.pathParseImplBaseCase2)))(Record_ST_Nested.reversePListImpl(Record_ST_Nested.reversePListImplInductionStep(Record_ST_Nested.reversePListImplBaseCase))))(Record_ST_Nested.rowPListAccessBaseCase2())(Record_ST_Nested.pListToArrayInductionStep(new Data_Symbol.IsSymbol(function () {
          return "b";
      }))(Record_ST_Nested.pListToArrayBaseCase))(Data_Symbol.SProxy.value)(function (v3) {
          return Control_Monad_ST_Unsafe.unsafeReadSTRef(v2);
      })(v1)();
      Record_ST_Nested.pathModify(Record_ST_Nested.parsePathImpl(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchInductionStep()(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchBaseCase2(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchInductionStep()(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchBaseCase2(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchInductionStep()(Record_ST_Nested.pathParseImplBaseCase2)))))))))))(Record_ST_Nested.reversePListImpl(Record_ST_Nested.reversePListImplInductionStep(Record_ST_Nested.reversePListImplInductionStep(Record_ST_Nested.reversePListImplInductionStep(Record_ST_Nested.reversePListImplBaseCase))))))(Record_ST_Nested.rowPListAccessInductionStep()(Record_ST_Nested.rowPListAccessInductionStep()(Record_ST_Nested.rowPListAccessBaseCase2())))(Record_ST_Nested.pListToArrayInductionStep(new Data_Symbol.IsSymbol(function () {
          return "a";
      }))(Record_ST_Nested.pListToArrayInductionStep(new Data_Symbol.IsSymbol(function () {
          return "b";
      }))(Record_ST_Nested.pListToArrayInductionStep(new Data_Symbol.IsSymbol(function () {
          return "c";
      }))(Record_ST_Nested.pListToArrayBaseCase))))(Data_Symbol.SProxy.value)(Data_Function["const"]("webot"))(v)();
      return Record_ST_Nested.pathPeek(Record_ST_Nested.parsePathImpl(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchInductionStep()(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchBaseCase2(Record_ST_Nested.parsePathImplDispatch()(Record_ST_Nested.parsePathDispatchInductionStep()(Record_ST_Nested.pathParseImplBaseCase2)))))))(Record_ST_Nested.reversePListImpl(Record_ST_Nested.reversePListImplInductionStep(Record_ST_Nested.reversePListImplInductionStep(Record_ST_Nested.reversePListImplBaseCase)))))(Record_ST_Nested.rowPListAccessInductionStep()(Record_ST_Nested.rowPListAccessBaseCase2()))(Record_ST_Nested.pListToArrayInductionStep(new Data_Symbol.IsSymbol(function () {
          return "b";
      }))(Record_ST_Nested.pListToArrayInductionStep(new Data_Symbol.IsSymbol(function () {
          return "c";
      }))(Record_ST_Nested.pListToArrayBaseCase)))(Data_Symbol.SProxy.value)(v1)();
  })());
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();