// Generated by purs bundle 0.12.1
var PS = {};
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Control.Monad.ST.Internal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  exports["null"] = $foreign["null"];
  exports["notNull"] = $foreign.notNull;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Record_Unsafe_Union = PS["Record.Unsafe.Union"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS["Record"] = PS["Record"] || {});
(function(exports) {
    "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Record.Builder"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_Unsafe_Union = PS["Record.Unsafe.Union"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var insert = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function(exports) {
    "use strict";

  function copyRecord(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  } 

  exports.thaw = function(rec) {
    return function() {
      return copyRecord(rec);
    };
  };

  exports.unsafeModify = function(l) {
    return function(f) {
      return function(rec) {
        return function() {
          rec[l] = f(rec[l]);
        };
      };
    };
  };
})(PS["Record.ST"] = PS["Record.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var $foreign = PS["Record.ST"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var modify = function (dictCons) {
      return function (dictIsSymbol) {
          return function (l) {
              return $foreign.unsafeModify(Data_Symbol.reflectSymbol(dictIsSymbol)(l));
          };
      };
  };
  exports["modify"] = modify;
  exports["thaw"] = $foreign.thaw;
})(PS["Record.ST"] = PS["Record.ST"] || {});
(function(exports) {

  exports.unsafePeekLazyRef = function (l, ref) {
    return function () {
      return function () {
        return ref[l]
      }
    }
  }
})(PS["Record.ST.Nested"] = PS["Record.ST.Nested"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["Record.ST.Nested"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_ST = PS["Record.ST"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var peekLazyRef = function (dictCons) {
      return function (dictIsSymbol) {
          return function (l) {
              return function (stRecord) {
                  return $foreign.unsafePeekLazyRef(Data_Symbol.reflectSymbol(dictIsSymbol)(l), stRecord);
              };
          };
      };
  };
  exports["peekLazyRef"] = peekLazyRef;
})(PS["Record.ST.Nested"] = PS["Record.ST.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.12.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Monad_ST_Ref = PS["Control.Monad.ST.Ref"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Console = PS["Effect.Console"];
  var Prelude = PS["Prelude"];
  var Record = PS["Record"];
  var Record_Builder = PS["Record.Builder"];
  var Record_ST = PS["Record.ST"];
  var Record_ST_Nested = PS["Record.ST.Nested"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];                 
  var A = function (x) {
      return x;
  };
  var B = function (x) {
      return x;
  };
  var C = function (x) {
      return x;
  };
  var OpenRecord = {};
  var openRecordImpl = OpenRecord;
  var cConstructor = function (ref) {
      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)({
          name: "C",
          toA: Record.get(new Data_Symbol.IsSymbol(function () {
              return "A";
          }))()(Data_Symbol.SProxy.value)(ref),
          toB: Record.get(new Data_Symbol.IsSymbol(function () {
              return "B";
          }))()(Data_Symbol.SProxy.value)(ref)
      });
  };
  var bConstructor = function (ref) {
      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)({
          name: "B",
          toA: Record.get(new Data_Symbol.IsSymbol(function () {
              return "A";
          }))()(Data_Symbol.SProxy.value)(ref),
          toC: Record.get(new Data_Symbol.IsSymbol(function () {
              return "C";
          }))()(Data_Symbol.SProxy.value)(ref)
      });
  };
  var aConstructor = function (ref) {
      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)({
          name: "A",
          toB: Record.get(new Data_Symbol.IsSymbol(function () {
              return "B";
          }))()(Data_Symbol.SProxy.value)(ref),
          toC: Record.get(new Data_Symbol.IsSymbol(function () {
              return "C";
          }))()(Data_Symbol.SProxy.value)(ref)
      });
  };
  var main = (function () {
      var output = (function () {
          var init = Record_Builder.build(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
              return "A";
          }))(Data_Symbol.SProxy.value)(Data_Nullable["null"]))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
              return "B";
          }))(Data_Symbol.SProxy.value)(Data_Nullable["null"]))(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
              return "C";
          }))(Data_Symbol.SProxy.value)(Data_Nullable["null"]))))({});
          return function __do() {
              var v = Record_ST.thaw(init)();
              var stBuilder = Control_Category.identity(Record_Builder.categoryBuilder);
              var v1 = Record_ST_Nested.peekLazyRef()(new Data_Symbol.IsSymbol(function () {
                  return "A";
              }))(Data_Symbol.SProxy.value)(v)();
              var stBuilder0 = Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
                  return "A";
              }))(Data_Symbol.SProxy.value)(v1))(stBuilder);
              var v2 = Record_ST_Nested.peekLazyRef()(new Data_Symbol.IsSymbol(function () {
                  return "B";
              }))(Data_Symbol.SProxy.value)(v)();
              var stBuilder1 = Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
                  return "B";
              }))(Data_Symbol.SProxy.value)(v2))(stBuilder0);
              var v3 = Record_ST_Nested.peekLazyRef()(new Data_Symbol.IsSymbol(function () {
                  return "C";
              }))(Data_Symbol.SProxy.value)(v)();
              var stBuilder2 = Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
                  return "C";
              }))(Data_Symbol.SProxy.value)(v3))(stBuilder1);
              var st = Record_Builder.build(stBuilder2)({});
              var aSt = Record_Builder.build(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
                  return "B";
              }))(Data_Symbol.SProxy.value)(Record.get(new Data_Symbol.IsSymbol(function () {
                  return "B";
              }))()(Data_Symbol.SProxy.value)(st)))(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
                  return "C";
              }))(Data_Symbol.SProxy.value)(Record.get(new Data_Symbol.IsSymbol(function () {
                  return "C";
              }))()(Data_Symbol.SProxy.value)(st))))({});
              var v4 = aConstructor(aSt)();
              Record_ST.modify()(new Data_Symbol.IsSymbol(function () {
                  return "A";
              }))(Data_Symbol.SProxy.value)(Data_Function["const"](Data_Nullable.notNull(v4)))(v)();
              var bSt = Record_Builder.build(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
                  return "A";
              }))(Data_Symbol.SProxy.value)(Record.get(new Data_Symbol.IsSymbol(function () {
                  return "A";
              }))()(Data_Symbol.SProxy.value)(st)))(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
                  return "C";
              }))(Data_Symbol.SProxy.value)(Record.get(new Data_Symbol.IsSymbol(function () {
                  return "C";
              }))()(Data_Symbol.SProxy.value)(st))))({});
              var v5 = bConstructor(bSt)();
              Record_ST.modify()(new Data_Symbol.IsSymbol(function () {
                  return "B";
              }))(Data_Symbol.SProxy.value)(Data_Function["const"](Data_Nullable.notNull(v5)))(v)();
              var cSt = Record_Builder.build(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
                  return "A";
              }))(Data_Symbol.SProxy.value)(Record.get(new Data_Symbol.IsSymbol(function () {
                  return "A";
              }))()(Data_Symbol.SProxy.value)(st)))(Record_Builder.insert()()(new Data_Symbol.IsSymbol(function () {
                  return "B";
              }))(Data_Symbol.SProxy.value)(Record.get(new Data_Symbol.IsSymbol(function () {
                  return "B";
              }))()(Data_Symbol.SProxy.value)(st))))({});
              var v6 = cConstructor(cSt)();
              Record_ST.modify()(new Data_Symbol.IsSymbol(function () {
                  return "C";
              }))(Data_Symbol.SProxy.value)(Data_Function["const"](Data_Nullable.notNull(v6)))(v)();
              return st;
          };
      })()();
    const _inspect = require("util").inspect
    const inspect = x => { console.log(_inspect(x, {depth: 15}))}
    inspect(output.A().toC().toA().toB())
      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
  })();
  exports["A"] = A;
  exports["aConstructor"] = aConstructor;
  exports["B"] = B;
  exports["bConstructor"] = bConstructor;
  exports["C"] = C;
  exports["cConstructor"] = cConstructor;
  exports["OpenRecord"] = OpenRecord;
  exports["main"] = main;
  exports["openRecordImpl"] = openRecordImpl;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
